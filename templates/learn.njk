.pass-fail-badge.pass {
        background-color: rgba(39, 201, 63, 0.2);
        color: #27c93f;
    }
    
    .pass-fail-badge.fail {
        background-color: rgba(255, 62, 62, 0.2);
        color: #ff3e3e;
    }
    
    .result-details {
        flex-grow: 1;
    }
    
    .result-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px solid var(--primary-dark);
    }
    
    .result-item:last-child {
        border-bottom: none;
    }
    
    .result-label {
        color: var(--text-muted);
    }
    
    /* Certificate Styling */
    .certification-container {
        margin: 3rem 0;
    }
    
    .certificate {
        background-color: var(--darker);
        border: 2px solid var(--primary);
        padding: 3rem;
        border-radius: 8px;
        position: relative;
        overflow: hidden;
        max-width: 800px;
        margin: 0 auto;
    }
    
    .certificate::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><text x="50%" y="50%" font-family="monospace" font-size="10" fill="rgba(0, 255, 65, 0.03)" text-anchor="middle" dominant-baseline="middle">CIPHERLAB</text></svg>');
        background-size: 100px 100px;
        opacity: 0.5;
    }
    
    .certificate-header {
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .certificate-logo {
        font-size: 2.5rem;
        font-weight: bold;
        color: var(--primary);
        margin-bottom: 1rem;
    }
    
    .certificate-title {
        font-size: 2.5rem;
        margin: 0;
        color: var(--primary);
    }
    
    .certificate-body {
        text-align: center;
        margin-bottom: 3rem;
    }
    
    .certificate-text {
        font-size: 1.25rem;
        margin: 0.5rem 0;
    }
    
    .certificate-name {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 1.5rem 0;
        color: var(--secondary);
    }
    
    .certificate-course {
        font-size: 1.75rem;
        font-weight: bold;
        margin: 1.5rem 0;
        color: var(--primary);
    }
    
    .certificate-date {
        font-size: 1.25rem;
        margin-top: 2rem;
    }
    
    .certificate-footer {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
    }
    
    .certificate-signature {
        text-align: center;
    }
    
    .signature-line {
        width: 200px;
        height: 2px;
        background-color: var(--primary);
        margin-bottom: 0.5rem;
    }
    
    .certificate-seal {
        text-align: center;
    }
    
    .seal-icon {
        font-size: 3rem;
        color: var(--primary);
    }
    
    .certificate-actions {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        margin-top: 2rem;
    }
    
    /* Quiz Review Styling */
    .quiz-review-container {
        margin-top: 3rem;
    }
    
    .review-title {
        color: var(--primary);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .quiz-actions {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        margin-top: 3rem;
    }
    
    /* Media queries for responsive design */
    @media (max-width: 992px) {
        .two-column {
            flex-direction: column;
        }
        
        .historical-info {
            flex-direction: column;
        }
        
        .history-image {
            width: 100%;
            max-width: 250px;
            margin: 0 auto 1.5rem;
        }
        
        .final-quiz-footer {
            flex-direction: column;
            gap: 1.5rem;
        }
        
        .requirements {
            margin-right: 0;
        }
        
        .results-summary {
            flex-direction: column;
        }
    }
    
    @media (max-width: 768px) {
        .module-header {
            flex-direction: column;
            text-align: center;
        }
        
        .module-icon {
            margin-right: 0;
            margin-bottom: 1rem;
        }
        
        .module-progress {
            margin-top: 1rem;
        }
        
        .timeline::before {
            left: 20px;
        }
        
        .timeline-item {
            flex-direction: column;
        }
        
        .timeline-marker {
            width: 100%;
            text-align: left;
            padding-left: 40px;
            margin-bottom: 0.75rem;
        }
        
        .timeline-marker::after {
            left: 20px;
            right: auto;
        }
        
        .quiz-navigation {
            flex-direction: column;
            gap: 1rem;
            align-items: center;
        }
        
        .certificate {
            padding: 1.5rem;
        }
        
        .certificate-title {
            font-size: 2rem;
        }
        
        .certificate-name {
            font-size: 2rem;
        }
        
        .certificate-footer {
            flex-direction: column;
            align-items: center;
            gap: 2rem;
        }
        
        .certificate-actions {
            flex-direction: column;
        }
    }
</style>

<!-- JavaScript Functionality -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize progress tracking
        updateProgress();
        
        // Set up module toggling
        const moduleHeaders = document.querySelectorAll('.module-header');
        moduleHeaders.forEach(header => {
            header.addEventListener('click', function() {
                const contentId = this.getAttribute('onclick').replace(/toggleModule\('(.+)'\)/, '$1');
                toggleModule(contentId);
            });
        });
        
        // Initialize lesson navigation
        const prevButton = document.getElementById('prev-lesson');
        const nextButton = document.getElementById('next-lesson');
        const completeButton = document.getElementById('complete-lesson');
        
        if (prevButton) {
            prevButton.addEventListener('click', navigateToPreviousLesson);
        }
        
        if (nextButton) {
            nextButton.addEventListener('click', navigateToNextLesson);
        }
        
        if (completeButton) {
            completeButton.addEventListener('click', completeCurrentLesson);
        }
        
        // Initialize quiz functionality
        const quizButtons = document.querySelectorAll('.check-answer-btn');
        quizButtons.forEach(button => {
            button.addEventListener('click', function() {
                const lessonKey = this.getAttribute('onclick').match(/checkAnswer\(this, '(.+)'\)/)[1];
                checkAnswer(this, lessonKey);
            });
        });
        
        // Initialize final quiz
        const startFinalQuizBtn = document.getElementById('start-final-quiz');
        if (startFinalQuizBtn) {
            startFinalQuizBtn.addEventListener('click', startFinalQuiz);
            
            // Check if all modules are completed to unlock final quiz
            const completedLessons = getCompletedLessons();
            const totalLessons = document.querySelectorAll('.lesson-item').length;
            
            if (completedLessons.length === totalLessons) {
                startFinalQuizBtn.disabled = false;
                document.getElementById('quiz-status-text').textContent = 'Unlocked';
                document.getElementById('quiz-lock-icon').className = 'fas fa-unlock';
            }
        }
        
        // Begin final quiz button
        const beginFinalQuizBtn = document.getElementById('begin-final-quiz');
        if (beginFinalQuizBtn) {
            beginFinalQuizBtn.addEventListener('click', beginFinalQuiz);
        }
        
        // Final quiz navigation
        const prevQuizQuestionBtn = document.getElementById('prev-quiz-question');
        const nextQuizQuestionBtn = document.getElementById('next-quiz-question');
        const submitQuizBtn = document.getElementById('submit-quiz');
        
        if (prevQuizQuestionBtn) {
            prevQuizQuestionBtn.addEventListener('click', navigateToPrevQuestion);
        }
        
        if (nextQuizQuestionBtn) {
            nextQuizQuestionBtn.addEventListener('click', navigateToNextQuestion);
        }
        
        if (submitQuizBtn) {
            submitQuizBtn.addEventListener('click', submitFinalQuiz);
        }
        
        // Retake and return buttons
        const retakeQuizBtn = document.getElementById('retake-quiz');
        const returnToModulesBtn = document.getElementById('return-to-modules');
        
        if (retakeQuizBtn) {
            retakeQuizBtn.addEventListener('click', retakeQuiz);
        }
        
        if (returnToModulesBtn) {
            returnToModulesBtn.addEventListener('click', returnToModules);
        }
        
        // Interactive Caesar cipher demo
        const caesarInput = document.getElementById('caesar-input');
        const caesarShift = document.getElementById('caesar-shift');
        const caesarOutput = document.getElementById('caesar-output');
        const shiftDisplay = document.getElementById('shift-display');
        const alphabetShifted = document.querySelector('.alphabet-row.shifted');
        
        if (caesarInput && caesarShift && caesarOutput && shiftDisplay) {
            caesarShift.addEventListener('input', function() {
                const shift = parseInt(this.value);
                shiftDisplay.textContent = shift;
                
                // Update Caesar cipher output
                const text = caesarInput.value.toUpperCase();
                let result = '';
                
                for (let i = 0; i < text.length; i++) {
                    const char = text.charAt(i);
                    
                    if (char.match(/[A-Z]/)) {
                        const code = text.charCodeAt(i);
                        result += String.fromCharCode(((code - 65 + shift) % 26) + 65);
                    } else {
                        result += char;
                    }
                }
                
                caesarOutput.textContent = result;
                
                // Update shifted alphabet visualization
                updateShiftedAlphabet(shift);
            });
            
            caesarInput.addEventListener('input', function() {
                const shift = parseInt(caesarShift.value);
                const text = this.value.toUpperCase();
                let result = '';
                
                for (let i = 0; i < text.length; i++) {
                    const char = text.charAt(i);
                    
                    if (char.match(/[A-Z]/)) {
                        const code = text.charCodeAt(i);
                        result += String.fromCharCode(((code - 65 + shift) % 26) + 65);
                    } else {
                        result += char;
                    }
                }
                
                caesarOutput.textContent = result;
            });
        }
        
        function updateShiftedAlphabet(shift) {
            if (!alphabetShifted) return;
            
            alphabetShifted.innerHTML = '';
            for (let i = 0; i < 26; i++) {
                const shifted = (i + shift) % 26;
                const letter = String.fromCharCode(65 + shifted);
                const letterDiv = document.createElement('div');
                letterDiv.className = 'alphabet-letter';
                letterDiv.textContent = letter;
                alphabetShifted.appendChild(letterDiv);
            }
        }
    });
    
    // Toggle module content
    function toggleModule(contentId) {
        const content = document.getElementById(contentId);
        if (content.style.display === 'block') {
            content.style.display = 'none';
        } else {
            content.style.display = 'block';
        }
    }
    
    // Show lesson content
    function showLesson(lessonId) {
        // Get module and lesson indices
        const [modulePrefix, lessonNumber] = lessonId.split('-');
        const moduleIndex = modulePrefix.replace('lesson', '');
        const lessonIndex = lessonNumber;
        
        // Set current lesson data
        currentModule = moduleIndex;
        currentLesson = lessonIndex;
        
        // Show lesson content section
        document.getElementById('lesson-content-section').style.display = 'block';
        
        // Scroll to lesson content
        document.getElementById('lesson-content-section').scrollIntoView({ behavior: 'smooth' });
        
        // Load lesson content
        const lessonContentId = `${lessonId}-content`;
        const lessonContent = document.getElementById(lessonContentId);
        const lessonTitle = document.querySelector(`[onclick="showLesson('${lessonId}')"] .lesson-title`).textContent;
        
        document.getElementById('lesson-title').textContent = lessonTitle;
        document.getElementById('lesson-content').innerHTML = lessonContent.innerHTML;
        
        // Update navigation buttons
        updateNavigation(moduleIndex, lessonIndex);
        
        // Update complete button state
        updateCompleteButtonState(moduleIndex, lessonIndex);
    }
    
    // Navigation functions
    function navigateToPreviousLesson() {
        // Implementation depends on lesson structure
        // This is a simplified version
        let moduleIndex = parseInt(currentModule);
        let lessonIndex = parseInt(currentLesson);
        
        if (lessonIndex > 1) {
            // Previous lesson in same module
            lessonIndex--;
        } else if (moduleIndex > 1) {
            // Last lesson of previous module
            moduleIndex--;
            // Assume 3 lessons per module for simplicity
            lessonIndex = 3;
        } else {
            // Already at first lesson
            return;
        }
        
        showLesson(`lesson${moduleIndex}-${lessonIndex}`);
    }
    
    function navigateToNextLesson() {
        // Implementation depends on lesson structure
        // This is a simplified version
        let moduleIndex = parseInt(currentModule);
        let lessonIndex = parseInt(currentLesson);
        
        // Assume 3 lessons per module for simplicity
        if (lessonIndex < 3) {
            // Next lesson in same module
            lessonIndex++;
        } else if (moduleIndex < 5) {
            // First lesson of next module
            moduleIndex++;
            lessonIndex = 1;
        } else {
            // Already at last lesson
            return;
        }
        
        showLesson(`lesson${moduleIndex}-${lessonIndex}`);
    }
    
    // Update navigation buttons
    function updateNavigation(moduleIndex, lessonIndex) {
        const prevButton = document.getElementById('prev-lesson');
        const nextButton = document.getElementById('next-lesson');
        
        // Disable previous button if at first lesson
        if (moduleIndex === '1' && lessonIndex === '1') {
            prevButton.disabled = true;
        } else {
            prevButton.disabled = false;
        }
        
        // Disable next button if at last lesson
        if (moduleIndex === '5' && lessonIndex === '3') {
            nextButton.disabled = true;
        } else {
            nextButton.disabled = false;
        }
    }
    
    // Complete current lesson
    function completeCurrentLesson() {
        // Get current lesson information from URL or state
        const moduleIndex = currentModule;
        const lessonIndex = currentLesson;
        
        // Mark lesson as completed
        const lessonKey = `${moduleIndex}-${lessonIndex}`;
        const completedLessons = getCompletedLessons();
        
        if (!completedLessons.includes(lessonKey)) {
            completedLessons.push(lessonKey);
            localStorage.setItem('cipherlab-completed-lessons', JSON.stringify(completedLessons));
            
            // Update UI
            const statusIcon = document.getElementById(`status-${moduleIndex}-${lessonIndex}`);
            if (statusIcon) {
                statusIcon.className = 'fas fa-check-circle';
            }
            
            // Update progress
            updateProgress();
            
            // Show completion feedback
            showCompletionFeedback();
        }
        
        // Disable complete button
        document.getElementById('complete-lesson').disabled = true;
        document.getElementById('complete-lesson').innerHTML = '<i class="fas fa-check-circle"></i> Completed';
        
        // Check if all lessons are completed to unlock final quiz
        const totalLessons = document.querySelectorAll('.lesson-item').length;
        if (completedLessons.length === totalLessons) {
            unlockFinalQuiz();
        }
    }
    
    // Update complete button state
    function updateCompleteButtonState(moduleIndex, lessonIndex) {
        const lessonKey = `${moduleIndex}-${lessonIndex}`;
        const completedLessons = getCompletedLessons();
        const completeButton = document.getElementById('complete-lesson');
        
        if (completedLessons.includes(lessonKey)) {
            completeButton.disabled = true;
            completeButton.innerHTML = '<i class="fas fa-check-circle"></i> Completed';
        } else {
            completeButton.disabled = false;
            completeButton.innerHTML = '<i class="fas fa-check-circle"></i> Mark as Complete';
        }
    }
    
    // Show completion feedback
    function showCompletionFeedback() {
        // You could add an animation or notification here
        console.log('Lesson completed!');
    }
    
    // Unlock final quiz
    function unlockFinalQuiz() {
        const startFinalQuizBtn = document.getElementById('start-final-quiz');
        const quizStatusText = document.getElementById('quiz-status-text');
        const quizLockIcon = document.getElementById('quiz-lock-icon');
        
        if (startFinalQuizBtn && quizStatusText && quizLockIcon) {
            startFinalQuizBtn.disabled = false;
            quizStatusText.textContent = 'Unlocked';
            quizLockIcon.className = 'fas fa-unlock';
            
            // Update progress bar
            document.getElementById('quiz-progress-value').style.width = '100%';
        }
    }
    
    // Get completed lessons from localStorage
    function getCompletedLessons() {
        const stored = localStorage.getItem('cipherlab-completed-lessons');
        return stored ? JSON.parse(stored) : [];
    }
    
    // Update overall progress
    function updateProgress() {
        const completedLessons = getCompletedLessons();
        
        // Count total lessons
        const totalLessons = document.querySelectorAll('.lesson-item').length;
        
        // Update progress stats
        document.getElementById('completed-count').textContent = completedLessons.length;
        document.getElementById('total-count').textContent = totalLessons;
        
        // Calculate percentage
        const percentage = totalLessons > 0 ? Math.round((completedLessons.length / totalLessons) * 100) : 0;
        document.getElementById('percentage').textContent = `${percentage}%`;
        document.getElementById('progress-value').style.width = `${percentage}%`;
        
        // Update module progress
        updateModuleProgress(completedLessons);
        
        // Update lesson status icons
        updateLessonStatusIcons(completedLessons);
        
        // Update final quiz progress
        document.getElementById('quiz-progress-value').style.width = `${percentage}%`;
    }
    
    // Update module progress
    function updateModuleProgress(completedLessons) {
        const modules = document.querySelectorAll('.learning-module');
        
        modules.forEach((module, index) => {
            const moduleIndex = index + 1;
            const lessons = module.querySelectorAll('.lesson-item');
            const completedModuleLessons = completedLessons.filter(lesson => lesson.startsWith(`${moduleIndex}-`));
            
            const modulePercentage = lessons.length > 0 ? Math.round((completedModuleLessons.length / lessons.length) * 100) : 0;
            
            // Update module percentage display
            const modulePercentageElement = module.querySelector('.module-percentage');
            if (modulePercentageElement) {
                modulePercentageElement.textContent = `${modulePercentage}%`;
            }
            
            // Update module header color based on progress
            if (modulePercentage === 100) {
                module.querySelector('.module-header').style.borderLeft = '4px solid var(--primary)';
            } else if (modulePercentage > 0) {
                module.querySelector('.module-header').style.borderLeft = '4px solid var(--secondary)';
            }
        });
    }
    
    // Update lesson status icons
    function updateLessonStatusIcons(completedLessons) {
        const lessons = document.querySelectorAll('.lesson-item');
        
        lessons.forEach((lesson) => {
            const onclickAttr = lesson.getAttribute('onclick');
            const lessonId = onclickAttr.match(/showLesson\('(.+)'\)/)[1];
            const [modulePrefix, lessonNumber] = lessonId.split('-');
            const moduleIndex = modulePrefix.replace('lesson', '');
            const lessonIndex = lessonNumber;
            
            const lessonKey = `${moduleIndex}-${lessonIndex}`;
            const statusIcon = document.getElementById(`status-${moduleIndex}-${lessonIndex}`);
            
            if (statusIcon) {
                if (completedLessons.includes(lessonKey)) {
                    statusIcon.className = 'fas fa-check-circle';
                } else {
                    statusIcon.className = 'far fa-circle';
                }
            }
        });
    }
    
    // Check quiz answers
    function checkAnswer(button, lessonKey) {
        const correctAnswer = button.getAttribute('data-correct');
        const questionContainer = button.closest('.quiz-question');
        const selectedOption = questionContainer.querySelector('input[name^="quiz"]:checked');
        const feedbackContainer = questionContainer.querySelector('.quiz-feedback');
        
        if (!selectedOption) {
            alert('Please select an answer before checking!');
            return;
        }
        
        feedbackContainer.style.display = 'block';
        
        if (selectedOption.value === correctAnswer) {
            // Correct answer
            feedbackContainer.querySelector('.correct-feedback').style.display = 'block';
            feedbackContainer.querySelector('.incorrect-feedback').style.display = 'none';
            
            // Mark lesson as completed if not already completed
            if (lessonKey) {
                const completedLessons = getCompletedLessons();
                if (!completedLessons.includes(lessonKey)) {
                    completedLessons.push(lessonKey);
                    localStorage.setItem('cipherlab-completed-lessons', JSON.stringify(completedLessons));
                    
                    // Update UI
                    const statusIcon = document.getElementById(`status-${lessonKey}`);
                    if (statusIcon) {
                        statusIcon.className = 'fas fa-check-circle';
                    }
                    
                    // Update progress
                    updateProgress();
                }
            }
        } else {
            // Incorrect answer
            feedbackContainer.querySelector('.correct-feedback').style.display = 'none';
            feedbackContainer.querySelector('.incorrect-feedback').style.display = 'block';
        }
        
        // Disable all options and the check button
        questionContainer.querySelectorAll('input[name^="quiz"]').forEach(input => {
            input.disabled = true;
        });
        button.disabled = true;
    }
    
    // Start final quiz
    function startFinalQuiz() {
        // Hide modules view
        document.querySelector('.learning-path-card').style.display = 'none';
        
        // Show quiz content
        const lessonContentSection = document.getElementById('lesson-content-section');
        lessonContentSection.style.display = 'block';
        
        // Set quiz content
        document.getElementById('lesson-title').textContent = 'Final Certification Quiz';
        document.getElementById('lesson-content').innerHTML = document.getElementById('final-quiz-content').innerHTML;
        
        // Hide navigation and complete buttons
        document.getElementById('prev-lesson').style.display = 'none';
        document.getElementById('next-lesson').style.display = 'none';
        document.getElementById('complete-lesson').style.display = 'none';
        
        // Scroll to quiz
        lessonContentSection.scrollIntoView({ behavior: 'smooth' });
    }
    
    // Begin final quiz
    function beginFinalQuiz() {
        // Hide intro and show questions
        document.querySelector('.final-quiz-intro').style.display = 'none';
        document.querySelector('.final-quiz-questions').style.display = 'block';
        
        // Initialize timer
        startQuizTimer();
        
        // Show first question
        document.querySelector('[data-question="1"]').style.display = 'block';
    }
    
    // Quiz timer
    let quizTimerInterval;
    let quizTimeRemaining = 15 * 60; // 15 minutes in seconds
    
    function startQuizTimer() {
        const timerDisplay = document.getElementById('quiz-time');
        
        updateTimerDisplay();
        
        quizTimerInterval = setInterval(() => {
            quizTimeRemaining--;
            updateTimerDisplay();
            
            if (quizTimeRemaining <= 0) {
                clearInterval(quizTimerInterval);
                submitFinalQuiz(); // Auto-submit when time runs out
            }
        }, 1000);
    }
    
    function updateTimerDisplay() {
        const minutes = Math.floor(quizTimeRemaining / 60);
        const seconds = quizTimeRemaining % 60;
        
        document.getElementById('quiz-time').textContent = 
            `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // Question navigation
    let currentQuestionNumber = 1;
    const totalQuestions = 10;
    
    function navigateToPrevQuestion() {
        if (currentQuestionNumber > 1) {
            // Hide current question
            document.querySelector(`[data-question="${currentQuestionNumber}"]`).style.display = 'none';
            
            // Show previous question
            currentQuestionNumber--;
            document.querySelector(`[data-question="${currentQuestionNumber}"]`).style.display = 'block';
            
            // Update question counter
            document.getElementById('current-question-num').textContent = currentQuestionNumber;
            
            // Update buttons
            updateQuizNavigationButtons();
        }
    }
    
    function navigateToNextQuestion() {
        if (currentQuestionNumber < totalQuestions) {
            // Hide current question
            document.querySelector(`[data-question="${currentQuestionNumber}"]`).style.display = 'none';
            
            // Show next question
            currentQuestionNumber++;
            document.querySelector(`[data-question="${currentQuestionNumber}"]`).style.display = 'block';
            
            // Update question counter
            document.getElementById('current-question-num').textContent = currentQuestionNumber;
            
            // Update buttons
            updateQuizNavigationButtons();
        }
    }
    
    function updateQuizNavigationButtons() {
        const prevButton = document.getElementById('prev-quiz-question');
        const nextButton = document.getElementById('next-quiz-question');
        const submitButton = document.getElementById('submit-quiz');
        
        // Update previous button
        prevButton.disabled = currentQuestionNumber === 1;
        
        // Update next button and show/hide submit button
        if (currentQuestionNumber === totalQuestions) {
            nextButton.style.display = 'none';
            submitButton.style.display = 'block';
        } else {
            nextButton.style.display = 'block';
            submitButton.style.display = 'none';
        }
    }
    
    // Submit final quiz
    function submitFinalQuiz() {
        // Stop timer
        clearInterval(quizTimerInterval);
        
        // Calculate score
        const correctAnswers = [
            'b', // Question 1
            'c', // Question 2
            'a', // Question 3
            'b', // Question 4
            'c', // Question 5
            'c', // Question 6
            'd', // Question 7
            'd', // Question 8
            'b', // Question 9
            'a'  // Question 10
        ];
        
        let score = 0;
        let correctCount = 0;
        let incorrectCount = 0;
        
        for (let i = 1; i <= totalQuestions; i++) {
            const selectedOption = document.querySelector(`input[name="final-q${i}"]:checked`);
            
            if (selectedOption) {
                if (selectedOption.value === correctAnswers[i-1]) {
                    score += 10;
                    correctCount++;
                } else {
                    incorrectCount++;
                }
            } else {
                incorrectCount++;
            }
        }
        
        // Hide questions and show results
        document.querySelector('.final-quiz-questions').style.display = 'none';
        document.querySelector('.final-quiz-results').style.display = 'block';
        
        // Update results
        document.getElementById('quiz-score-value').textContent = score;
        document.getElementById('correct-answers-count').textContent = correctCount;
        document.getElementById('incorrect-answers-count').textContent = incorrectCount;
        document.getElementById('time-taken').textContent = formatTime(15 * 60 - quizTimeRemaining);
        
        // Update score circle
        document.querySelector('.score-circle').style.background = 
            `conic-gradient(var(--primary) 0%, var(--primary) ${score}%, var(--darker) ${score}%)`;
        
        // Show pass/fail badge
        const passFail = document.getElementById('pass-fail-badge');
        if (score >= 80) {
            passFail.textContent = 'PASSED';
            passFail.className = 'pass-fail-badge pass';
            
            // Show certificate
            document.getElementById('certification-container').style.display = 'block';
            
            // Set certificate date
            const today = new Date();
            document.getElementById('certificate-date').textContent = 
                today.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
        } else {
            passFail.textContent = 'FAILED';
            passFail.className = 'pass-fail-badge fail';
            
            // Hide certificate
            document.getElementById('certification-container').style.display = 'none';
        }
        
        // Generate answers review
        generateAnswersReview(correctAnswers);
    }
    
    // Generate answers review
    function generateAnswersReview(correctAnswers) {
        const reviewContainer = document.getElementById('answers-review-container');
        reviewContainer.innerHTML = '';
        
        for (let i = 1; i <= totalQuestions; i++) {
            const questionText = document.querySelector(`[data-question="${i}"] .question-title`).textContent;
            const selectedOption = document.querySelector(`input[name="final-q${i}"]:checked`);
            const selectedValue = selectedOption ? selectedOption.value : null;
            const correctValue = correctAnswers[i-1];
            
            // Create review item
            const reviewItem = document.createElement('div');
            reviewItem.className = 'review-item';
            
            // Question number and text
            const questionHeader = document.createElement('div');
            questionHeader.className = 'review-question';
            questionHeader.innerHTML = `<span class="question-number">${i}.</span> ${questionText}`;
            reviewItem.appendChild(questionHeader);
            
            // Status (correct/incorrect/unanswered)
            const statusDiv = document.createElement('div');
            
            if (!selectedValue) {
                statusDiv.className = 'review-status unanswered';
                statusDiv.innerHTML = '<i class="fas fa-minus-circle"></i> Not Answered';
            } else if (selectedValue === correctValue) {
                statusDiv.className = 'review-status correct';
                statusDiv.innerHTML = '<i class="fas fa-check-circle"></i> Correct';
            } else {
                statusDiv.className = 'review-status incorrect';
                statusDiv.innerHTML = '<i class="fas fa-times-circle"></i> Incorrect';
                
                // Add correct answer
                const correctAnswerDiv = document.createElement('div');
                correctAnswerDiv.className = 'correct-answer';
                correctAnswerDiv.innerHTML = `<strong>Correct Answer:</strong> ${getAnswerText(i, correctValue)}`;
                reviewItem.appendChild(correctAnswerDiv);
            }
            
            reviewItem.appendChild(statusDiv);
            
            // Add to container
            reviewContainer.appendChild(reviewItem);
        }
    }
    
    // Get answer text based on value
    function getAnswerText(questionNumber, value) {
        const question = document.querySelector(`[data-question="${questionNumber}"]`);
        const option = question.querySelector(`input[value="${value}"]`).closest('.quiz-option');
        return option.textContent.trim();
    }
    
    // Format time from seconds to MM:SS
    function formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
    
    // Retake quiz
    function retakeQuiz() {
        // Reset current question number
        currentQuestionNumber = 1;
        
        // Reset timer
        quizTimeRemaining = 15 * 60;
        
        // Reset all radio buttons
        for (let i = 1; i <= totalQuestions; i++) {
            const radios = document.querySelectorAll(`input[name="final-q${i}"]`);
            radios.forEach(radio => {
                radio.checked = false;
            });
        }
        
        // Hide results and show intro
        document.querySelector('.final-quiz-results').style.display = 'none';
        document.querySelector('.final-quiz-intro').style.display = 'block';
        document.querySelector('.final-quiz-questions').style.display = 'none';
        
        // Show first question and hide others
        for (let i = 1; i <= totalQuestions; i++) {
            const question = document.querySelector(`[data-question="${i}"]`);
            question.style.display = i === 1 ? 'block' : 'none';
        }
        
        // Reset navigation buttons
        document.getElementById('prev-quiz-question').disabled = true;
        document.getElementById('next-quiz-question').style.display = 'block';
        document.getElementById('submit-quiz').style.display = 'none';
        
        // Update question counter
        document.getElementById('current-question-num').textContent = 1;
    }
    
    // Return to modules
    function returnToModules() {
        // Show modules view
        document.querySelector('.learning-path-card').style.display = 'block';
        
        // Hide lesson content section
        document.getElementById('lesson-content-section').style.display = 'none';
        
        // Reset current lesson data
        currentModule = null;
        currentLesson = null;
        
        // Scroll to top
        window.scrollTo(0, 0);
    }
    
    // Current module and lesson tracking
    let currentModule = null;
    let currentLesson = null;
</script>---
layout: layout.njk
title: Learn Cryptography - CipherLab
---
<div class="learn-hero">
    <h1 class="glitch" data-text="Learn Cryptography">
        <span>Learn Cryptography</span>
        <span aria-hidden="true">Learn Cryptography</span>
        <span aria-hidden="true">Learn Cryptography</span>
    </h1>
    <p class="mb-4 fade-in">Master the art and science of cryptography through interactive modules and hands-on exercises</p>
</div>

<section class="container section">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="learning-path-card fade-in">
                <div class="card-header">
                    <h2 class="mb-0"><i class="fas fa-graduation-cap"></i> Your Learning Journey</h2>
                </div>
                <div class="card-body">
                    <div class="progress-tracker mb-4">
                        <div class="progress-stats">
                            <span>Progress: <span id="completed-count">0</span>/<span id="total-count">12</span> lessons</span>
                            <span id="percentage">0%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-value" id="progress-value" style="width: 0%;"></div>
                        </div>
                    </div>
                    
                    <div class="learning-path">
                        <!-- Module 1 -->
                        <div class="learning-module" id="module1">
                            <div class="module-header" onclick="toggleModule('module1-content')">
                                <div class="module-icon">
                                    <i class="fas fa-key"></i>
                                </div>
                                <div class="module-title">
                                    <h3>Module 1: Fundamentals of Cryptography</h3>
                                    <p>Learn the basic concepts and terminology of cryptography</p>
                                </div>
                                <div class="module-progress">
                                    <span class="module-percentage" id="module1-percentage">0%</span>
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                            </div>
                            <div class="module-content" id="module1-content">
                                <div class="lessons-list">
                                    <div class="lesson-item" onclick="showLesson('lesson1-1')">
                                        <div class="lesson-title">What is Cryptography?</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-1-1"></i></div>
                                    </div>
                                    <div class="lesson-item" onclick="showLesson('lesson1-2')">
                                        <div class="lesson-title">Types of Cryptography</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-1-2"></i></div>
                                    </div>
                                    <div class="lesson-item" onclick="showLesson('lesson1-3')">
                                        <div class="lesson-title">The Use of Cryptography in the Real World</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-1-3"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Module 2 -->
                        <div class="learning-module" id="module2">
                            <div class="module-header" onclick="toggleModule('module2-content')">
                                <div class="module-icon">
                                    <i class="fas fa-history"></i>
                                </div>
                                <div class="module-title">
                                    <h3>Module 2: Classical Ciphers</h3>
                                    <p>Explore historical encryption techniques and their implementations</p>
                                </div>
                                <div class="module-progress">
                                    <span class="module-percentage" id="module2-percentage">0%</span>
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                            </div>
                            <div class="module-content" id="module2-content">
                                <div class="lessons-list">
                                    <div class="lesson-item" onclick="showLesson('lesson2-1')">
                                        <div class="lesson-title">Caesar Cipher</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-2-1"></i></div>
                                    </div>
                                    <div class="lesson-item" onclick="showLesson('lesson2-2')">
                                        <div class="lesson-title">Vigenère Cipher</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-2-2"></i></div>
                                    </div>
                                    <div class="lesson-item" onclick="showLesson('lesson2-3')">
                                        <div class="lesson-title">Substitution Cipher</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-2-3"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Module 3 -->
                        <div class="learning-module" id="module3">
                            <div class="module-header" onclick="toggleModule('module3-content')">
                                <div class="module-icon">
                                    <i class="fas fa-shield-alt"></i>
                                </div>
                                <div class="module-title">
                                    <h3>Module 3: Modern Cryptography</h3>
                                    <p>Understand contemporary encryption algorithms and techniques</p>
                                </div>
                                <div class="module-progress">
                                    <span class="module-percentage" id="module3-percentage">0%</span>
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                            </div>
                            <div class="module-content" id="module3-content">
                                <div class="lessons-list">
                                    <div class="lesson-item" onclick="showLesson('lesson3-1')">
                                        <div class="lesson-title">Symmetric Encryption</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-3-1"></i></div>
                                    </div>
                                    <div class="lesson-item" onclick="showLesson('lesson3-2')">
                                        <div class="lesson-title">Asymmetric Encryption</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-3-2"></i></div>
                                    </div>
                                    <div class="lesson-item" onclick="showLesson('lesson3-3')">
                                        <div class="lesson-title">Hash Functions</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-3-3"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Module 4 -->
                        <div class="learning-module" id="module4">
                            <div class="module-header" onclick="toggleModule('module4-content')">
                                <div class="module-icon">
                                    <i class="fas fa-globe"></i>
                                </div>
                                <div class="module-title">
                                    <h3>Module 4: Practical Applications</h3>
                                    <p>Apply cryptographic principles to real-world security challenges</p>
                                </div>
                                <div class="module-progress">
                                    <span class="module-percentage" id="module4-percentage">0%</span>
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                            </div>
                            <div class="module-content" id="module4-content">
                                <div class="lessons-list">
                                    <div class="lesson-item" onclick="showLesson('lesson4-1')">
                                        <div class="lesson-title">Secure Communications</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-4-1"></i></div>
                                    </div>
                                    <div class="lesson-item" onclick="showLesson('lesson4-2')">
                                        <div class="lesson-title">Digital Signatures & PKI</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-4-2"></i></div>
                                    </div>
                                    <div class="lesson-item" onclick="showLesson('lesson4-3')">
                                        <div class="lesson-title">Blockchain & Cryptocurrencies</div>
                                        <div class="lesson-status"><i class="far fa-circle" id="status-4-3"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Module 5 -->
                <div class="learning-module" id="module5">
                    <div class="module-header" onclick="toggleModule('module5-content')">
                        <div class="module-icon">
                            <i class="fas fa-brain"></i>
                        </div>
                        <div class="module-title">
                            <h3>Module 5: Advanced Topics</h3>
                            <p>Discover cutting-edge cryptographic concepts and future directions</p>
                        </div>
                        <div class="module-progress">
                            <span class="module-percentage" id="module5-percentage">0%</span>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    <div class="module-content" id="module5-content">
                        <div class="lessons-list">
                            <div class="lesson-item" onclick="showLesson('lesson5-1')">
                                <div class="lesson-title">Quantum Cryptography</div>
                                <div class="lesson-status"><i class="far fa-circle" id="status-5-1"></i></div>
                            </div>
                            <div class="lesson-item" onclick="showLesson('lesson5-2')">
                                <div class="lesson-title">Zero-Knowledge Proofs</div>
                                <div class="lesson-status"><i class="far fa-circle" id="status-5-2"></i></div>
                            </div>
                            <div class="lesson-item" onclick="showLesson('lesson5-3')">
                                <div class="lesson-title">Homomorphic Encryption</div>
                                <div class="lesson-status"><i class="far fa-circle" id="status-5-3"></i></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Final Quiz Section -->
                <div class="final-quiz-container" id="final-quiz-section">
                    <div class="final-quiz-card">
                        <div class="final-quiz-header">
                            <div class="quiz-icon">
                                <i class="fas fa-graduation-cap"></i>
                            </div>
                            <div class="quiz-info">
                                <h3>Final Certification Quiz</h3>
                                <p>Test your knowledge and earn your cryptography certification</p>
                            </div>
                            <div class="quiz-status">
                                <span id="quiz-status-text">Locked</span>
                                <i class="fas fa-lock" id="quiz-lock-icon"></i>
                            </div>
                        </div>
                        <div class="final-quiz-footer">
                            <div class="requirements">
                                <p><i class="fas fa-info-circle"></i> Complete all modules to unlock the final quiz</p>
                                <div class="progress-bar quiz-progress">
                                    <div class="progress-value" id="quiz-progress-value" style="width: 0%;"></div>
                                </div>
                            </div>
                            <button id="start-final-quiz" class="final-quiz-button" disabled>
                                <i class="fas fa-play"></i> Start Final Quiz
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<section class="container section" id="lesson-content-section" style="display: none;">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="lesson-card fade-in">
                <div class="card-header">
                    <div class="lesson-nav">
                        <button id="prev-lesson" class="nav-button"><i class="fas fa-chevron-left"></i> Previous</button>
                        <h2 id="lesson-title" class="mb-0"></h2>
                        <button id="next-lesson" class="nav-button">Next <i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="lesson-content">
                        <!-- Lesson content will be loaded here -->
                    </div>
                    
                    <div class="lesson-complete-section">
                        <button id="complete-lesson" class="complete-button">
                            <i class="fas fa-check-circle"></i> Mark as Complete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Lesson Content Templates -->
<div id="lesson-templates" style="display: none;">
    <!-- Lesson 1-1: What is Cryptography? -->
    <div id="lesson1-1-content">
        <p class="mb-4">Cryptography is a technique of securing information and communications through the use of codes so that only individuals for whom the information is intended can read it and process it. Derived from the Greek word "kryptos," meaning hidden, cryptography translates to "hidden writing."</p>
        
        <div class="key-concept mb-5">
            <h4><i class="fas fa-lightbulb"></i> Key Concept</h4>
            <p>Cryptography transforms messages into an unreadable format (known as <strong>ciphertext</strong>) that can only be decrypted into a readable format (known as <strong>plaintext</strong>) by the authorized intended recipient using a specific secret key.</p>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Core Principles</h3>
            <p>Modern cryptography is built on four fundamental principles:</p>
            
            <div class="grid-container">
                <div class="grid-item">
                    <div class="principle-icon"><i class="fas fa-user-secret"></i></div>
                    <h4>Confidentiality</h4>
                    <p>Information remains private and is accessible only to authorized parties</p>
                </div>
                <div class="grid-item">
                    <div class="principle-icon"><i class="fas fa-fingerprint"></i></div>
                    <h4>Integrity</h4>
                    <p>Data cannot be altered in storage or transit without detection</p>
                </div>
                <div class="grid-item">
                    <div class="principle-icon"><i class="fas fa-signature"></i></div>
                    <h4>Authentication</h4>
                    <p>Verification of the identity of users and the origin of data</p>
                </div>
                <div class="grid-item">
                    <div class="principle-icon"><i class="fas fa-ban"></i></div>
                    <h4>Non-repudiation</h4>
                    <p>Sender cannot deny having sent a message</p>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Historical Context</h3>
            <p>Cryptography has a rich history spanning thousands of years:</p>
            
            <div class="timeline">
                <div class="timeline-item">
                    <div class="timeline-marker">1900 BCE</div>
                    <div class="timeline-content">
                        <h4>Ancient Egypt</h4>
                        <p>Non-standard hieroglyphics found in the tomb of Khnumhotep II represent one of the earliest known examples of cryptography</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-marker">500 BCE</div>
                    <div class="timeline-content">
                        <h4>Sparta</h4>
                        <p>The Spartans used a device called a scytale for secure military communications</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-marker">50 BCE</div>
                    <div class="timeline-content">
                        <h4>Roman Empire</h4>
                        <p>Julius Caesar used a simple substitution cipher (now known as the Caesar cipher) to protect military messages</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-marker">1500s</div>
                    <div class="timeline-content">
                        <h4>Renaissance</h4>
                        <p>Vigenère cipher developed, considered "le chiffre indéchiffrable" (the unbreakable cipher) for three centuries</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-marker">1940s</div>
                    <div class="timeline-content">
                        <h4>World War II</h4>
                        <p>Enigma machine used by Germany for secure communications, later broken by Allied cryptanalysts led by Alan Turing</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-marker">1970s</div>
                    <div class="timeline-content">
                        <h4>Modern Era</h4>
                        <p>Development of DES (Data Encryption Standard) and the concept of public-key cryptography, revolutionizing the field</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Applications in Today's World</h3>
            <p>Cryptography ensures the security of modern-day communication channels and is ubiquitous in our digital lives:</p>
            
            <ul class="application-list">
                <li><i class="fas fa-envelope"></i> Email encryption and digital signatures</li>
                <li><i class="fas fa-shopping-cart"></i> Secure online shopping and banking (HTTPS)</li>
                <li><i class="fas fa-lock"></i> Password protection and authentication</li>
                <li><i class="fas fa-mobile-alt"></i> Mobile phone communications</li>
                <li><i class="fas fa-broadcast-tower"></i> Wireless networks (WPA/WPA2)</li>
                <li><i class="fas fa-database"></i> Secure storage of sensitive data</li>
                <li><i class="fas fa-credit-card"></i> Credit card transactions</li>
                <li><i class="fas fa-bitcoin"></i> Cryptocurrencies and blockchain technology</li>
            </ul>
        </div>
        
        <div class="interactive-quiz">
            <h3 class="quiz-title"><i class="fas fa-question-circle"></i> Knowledge Check</h3>
            <div class="quiz-question">
                <p>Who is able to read and process information secured by cryptography?</p>
                <div class="quiz-options">
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-1" value="a"> Anyone who intercepts the message
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-1" value="b"> Only the authorized intended recipient
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-1" value="c"> Government agencies
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-1" value="d"> Hackers
                    </label>
                </div>
                <div class="quiz-feedback" style="display: none;">
                    <div class="correct-feedback">
                        <i class="fas fa-check-circle"></i> Correct! Only the authorized intended recipient with the proper decryption key should be able to read the information.
                    </div>
                    <div class="incorrect-feedback">
                        <i class="fas fa-times-circle"></i> Incorrect. The whole purpose of cryptography is to ensure that only the authorized intended recipient can read the encrypted information.
                    </div>
                </div>
                <button class="check-answer-btn" data-correct="b" onclick="checkAnswer(this, '1-1')">Check Answer</button>
            </div>
        </div>
    </div>
    
    <!-- Lesson 1-2: Types of Cryptography -->
    <div id="lesson1-2-content">
        <p class="mb-4">Cryptography can be categorized into three primary types, each with its distinct approach to securing information. Understanding these types is essential for grasping how modern security systems work.</p>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">1. Symmetric Key Cryptography</h3>
            
            <div class="key-concept mb-4">
                <h4><i class="fas fa-key"></i> Definition</h4>
                <p>Symmetric key cryptography uses a <strong>single shared key</strong> for both encryption and decryption processes. Both the sender and recipient of an encrypted message have access to the same secret key.</p>
            </div>
            
            <div class="two-column">
                <div class="column">
                    <h4 class="subsection-title">How It Works</h4>
                    <ol class="process-list">
                        <li>Alice and Bob agree on a secret key</li>
                        <li>Alice encrypts her message using the key</li>
                        <li>Alice sends the encrypted message to Bob</li>
                        <li>Bob decrypts the message using the same key</li>
                    </ol>
                    
                    <div class="note-box">
                        <p><strong>Key Challenge:</strong> How do Alice and Bob securely share the key initially?</p>
                    </div>
                </div>
                
                <div class="column">
                    <h4 class="subsection-title">Common Algorithms</h4>
                    <div class="algorithm-list">
                        <div class="algorithm-item">
                            <h5>DES (Data Encryption Standard)</h5>
                            <ul>
                                <li>Developed in the 1970s</li>
                                <li>56-bit key (considered insecure today)</li>
                                <li>Block cipher operating on 64-bit blocks</li>
                            </ul>
                        </div>
                        <div class="algorithm-item">
                            <h5>AES (Advanced Encryption Standard)</h5>
                            <ul>
                                <li>Adopted by NIST in 2001</li>
                                <li>128, 192, or 256-bit keys</li>
                                <li>Current standard for government and industry</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="attributes-container">
                <div class="attribute">
                    <div class="attribute-icon"><i class="fas fa-bolt"></i></div>
                    <h5>Speed</h5>
                    <p>Fast and efficient for large amounts of data</p>
                </div>
                <div class="attribute">
                    <div class="attribute-icon"><i class="fas fa-cogs"></i></div>
                    <h5>Efficiency</h5>
                    <p>Low computational overhead</p>
                </div>
                <div class="attribute">
                    <div class="attribute-icon"><i class="fas fa-user-secret"></i></div>
                    <h5>Confidentiality</h5>
                    <p>Provides strong confidentiality if key remains secret</p>
                </div>
                <div class="attribute">
                    <div class="attribute-icon"><i class="fas fa-exchange-alt"></i></div>
                    <h5>Key Exchange</h5>
                    <p>Requires secure method to share keys</p>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">2. Asymmetric Key Cryptography</h3>
            
            <div class="key-concept mb-4">
                <h4><i class="fas fa-key"></i> Definition</h4>
                <p>Asymmetric cryptography uses <strong>a pair of keys</strong> - a public key for encryption and a private key for decryption. The keys are mathematically related but knowing the public key does not reveal the private key.</p>
            </div>
            
            <div class="two-column">
                <div class="column">
                    <h4 class="subsection-title">How It Works</h4>
                    <ol class="process-list">
                        <li>Bob generates a key pair (public and private)</li>
                        <li>Bob shares his public key with anyone, including Alice</li>
                        <li>Alice encrypts her message using Bob's public key</li>
                        <li>Alice sends the encrypted message to Bob</li>
                        <li>Only Bob can decrypt the message using his private key</li>
                    </ol>
                </div>
                
                <div class="column">
                    <h4 class="subsection-title">Common Algorithms</h4>
                    <div class="algorithm-list">
                        <div class="algorithm-item">
                            <h5>RSA (Rivest-Shamir-Adleman)</h5>
                            <ul>
                                <li>Based on the factorization of large prime numbers</li>
                                <li>Commonly used for secure data transmission</li>
                                <li>The backbone of many security protocols</li>
                            </ul>
                        </div>
                        <div class="algorithm-item">
                            <h5>ECC (Elliptic Curve Cryptography)</h5>
                            <ul>
                                <li>Uses algebraic structure of elliptic curves</li>
                                <li>Smaller key sizes for equivalent security</li>
                                <li>More efficient for mobile and IoT devices</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="attributes-container">
                <div class="attribute">
                    <div class="attribute-icon"><i class="fas fa-shield-alt"></i></div>
                    <h5>Security</h5>
                    <p>Strong security based on mathematical problems</p>
                </div>
                <div class="attribute">
                    <div class="attribute-icon"><i class="fas fa-globe"></i></div>
                    <h5>Key Distribution</h5>
                    <p>Solves the key exchange problem</p>
                </div>
                <div class="attribute">
                    <div class="attribute-icon"><i class="fas fa-tachometer-alt"></i></div>
                    <h5>Performance</h5>
                    <p>Slower than symmetric encryption</p>
                </div>
                <div class="attribute">
                    <div class="attribute-icon"><i class="fas fa-signature"></i></div>
                    <h5>Authentication</h5>
                    <p>Enables digital signatures and authentication</p>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">3. Hash Functions</h3>
            
            <div class="key-concept mb-4">
                <h4><i class="fas fa-fingerprint"></i> Definition</h4>
                <p>A hash function is a <strong>one-way method</strong> that transforms data of any size into a fixed-size output (hash value or digest). Unlike encryption, hashing is not reversible—you cannot derive the original data from its hash.</p>
            </div>
            
            <div class="two-column">
                <div class="column">
                    <h4 class="subsection-title">How It Works</h4>
                    <ol class="process-list">
                        <li>Input data (of any size) is processed by the hash function</li>
                        <li>The function produces a fixed-length output (hash)</li>
                        <li>Even a small change in input produces a completely different hash</li>
                        <li>The process cannot be reversed to obtain the original input</li>
                    </ol>
                    
                    <div class="note-box">
                        <p><strong>Key Properties:</strong> Deterministic, quick to compute, pre-image resistant, collision-resistant, and exhibits the avalanche effect</p>
                    </div>
                </div>
                
                <div class="column">
                    <h4 class="subsection-title">Common Algorithms</h4>
                    <div class="algorithm-list">
                        <div class="algorithm-item">
                            <h5>SHA-2 & SHA-3 (Secure Hash Algorithm)</h5>
                            <ul>
                                <li>SHA-256, SHA-384, SHA-512 variants</li>
                                <li>Widely used in security applications</li>
                                <li>Current standard recommended by NIST</li>
                            </ul>
                        </div>
                        <div class="algorithm-item">
                            <h5>MD5 & SHA-1 (Legacy)</h5>
                            <ul>
                                <li>Older algorithms now considered broken</li>
                                <li>Vulnerable to collision attacks</li>
                                <li>Not recommended for security purposes</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="applications-container">
                <h4 class="subsection-title">Common Applications</h4>
                <div class="application-grid">
                    <div class="application-item">
                        <div class="application-icon"><i class="fas fa-lock"></i></div>
                        <h5>Password Storage</h5>
                        <p>Systems store hashed passwords rather than plaintext</p>
                    </div>
                    <div class="application-item">
                        <div class="application-icon"><i class="fas fa-file-alt"></i></div>
                        <h5>Data Integrity</h5>
                        <p>Verifying files haven't been altered during transfer</p>
                    </div>
                    <div class="application-item">
                        <div class="application-icon"><i class="fas fa-signature"></i></div>
                        <h5>Digital Signatures</h5>
                        <p>Creating and verifying document signatures</p>
                    </div>
                    <div class="application-item">
                        <div class="application-icon"><i class="fas fa-link"></i></div>
                        <h5>Blockchain</h5>
                        <p>Securing transactions in cryptocurrencies</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="interactive-quiz">
            <h3 class="quiz-title"><i class="fas fa-question-circle"></i> Knowledge Check</h3>
            <div class="quiz-question">
                <p>Which is not a cryptography key type?</p>
                <div class="quiz-options">
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-2" value="a"> Hash Function
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-2" value="b"> Asymmetric Key
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-2" value="c"> Symmetric Key
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-2" value="d"> Two-way Key
                    </label>
                </div>
                <div class="quiz-feedback" style="display: none;">
                    <div class="correct-feedback">
                        <i class="fas fa-check-circle"></i> Correct! "Two-way Key" is not a standard cryptography key type. The three main types are symmetric key, asymmetric key, and hash functions.
                    </div>
                    <div class="incorrect-feedback">
                        <i class="fas fa-times-circle"></i> Incorrect. The three main types of cryptography are symmetric key, asymmetric key, and hash functions. "Two-way Key" is not a standard cryptography type.
                    </div>
                </div>
                <button class="check-answer-btn" data-correct="d" onclick="checkAnswer(this, '1-2')">Check Answer</button>
            </div>
        </div>
    </div>
    
    <!-- Lesson 1-3: The Use of Cryptography in the Real World -->
    <div id="lesson1-3-content">
        <p class="mb-4">Cryptography is vastly important since it secures and encrypts our sensitive information/data so that only those with permission can access it. It plays a crucial role in modern-day digital security, spanning multiple industries and technologies to guarantee privacy, data integrity, and security.</p>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Industries Relying on Cryptography</h3>
            
            <div class="industry-grid">
                <div class="industry-item">
                    <div class="industry-icon"><i class="fas fa-hospital"></i></div>
                    <h4>Healthcare</h4>
                    <p>Protects patient records (EHRs), maintains HIPAA compliance, and secures medical device communications</p>
                </div>
                <div class="industry-item">
                    <div class="industry-icon"><i class="fas fa-university"></i></div>
                    <h4>Finance & Banking</h4>
                    <p>Secures online transactions, banking apps, ATM operations, and credit card processing</p>
                </div>
                <div class="industry-item">
                    <div class="industry-icon"><i class="fas fa-fighter-jet"></i></div>
                    <h4>Military & Defense</h4>
                    <p>Protects classified information, secures communications, and safeguards strategic assets</p>
                </div>
                <div class="industry-item">
                    <div class="industry-icon"><i class="fas fa-truck"></i></div>
                    <h4>Supply Chain</h4>
                    <p>Ensures secure tracking, authenticates products, and prevents counterfeiting</p>
                </div>
                <div class="industry-item">
                    <div class="industry-icon"><i class="fas fa-gavel"></i></div>
                    <h4>Government</h4>
                    <p>Protects citizen data, secures voting systems, and enables confidential communications</p>
                </div>
                <div class="industry-item">
                    <div class="industry-icon"><i class="fas fa-shopping-cart"></i></div>
                    <h4>E-commerce</h4>
                    <p>Enables secure online shopping, payment processing, and customer data protection</p>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Everyday Applications</h3>
            
            <div class="applications-container">
                <div class="app-category">
                    <h4><i class="fas fa-globe"></i> Web Security</h4>
                    <div class="app-items">
                        <div class="app-item">
                            <h5>HTTPS Protocol</h5>
                            <p>Secures websites with SSL/TLS encryption, indicated by the padlock icon in browsers</p>
                        </div>
                        <div class="app-item">
                            <h5>Certificate Authorities</h5>
                            <p>Verify the identity of websites and issue digital certificates</p>
                        </div>
                    </div>
                </div>
                
                <div class="app-category">
                    <h4><i class="fas fa-comments"></i> Communications</h4>
                    <div class="app-items">
                        <div class="app-item">
                            <h5>End-to-End Encryption</h5>
                            <p>Used in messaging apps like Signal and WhatsApp to ensure only the intended recipients can read messages</p>
                        </div>
                        <div class="app-item">
                            <h5>Email Encryption</h5>
                            <p>PGP (Pretty Good Privacy) and S/MIME protocols for secure email communications</p>
                        </div>
                    </div>
                </div>
                
                <div class="app-category">
                    <h4><i class="fas fa-bitcoin"></i> Cryptocurrencies</h4>
                    <div class="app-items">
                        <div class="app-item">
                            <h5>Blockchain Technology</h5>
                            <p>Uses cryptographic techniques to secure transactions and control token creation</p>
                        </div>
                        <div class="app-item">
                            <h5>Digital Wallets</h5>
                            <p>Secure storage of cryptocurrency private keys using encryption</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Modern Implementation Examples</h3>
            
            <div class="implementation-grid">
                <div class="implementation-item">
                    <div class="implementation-header">
                        <div class="implementation-icon"><i class="fas fa-wifi"></i></div>
                        <h4>Wi-Fi Security</h4>
                    </div>
                    <div class="implementation-content">
                        <p>WPA2/WPA3 protocols use cryptography to:</p>
                        <ul>
                            <li>Authenticate legitimate network users</li>
                            <li>Encrypt data transmitted between devices and routers</li>
                            <li>Prevent eavesdropping on wireless communications</li>
                        </ul>
                    </div>
                </div>
                
                <div class="implementation-item">
                    <div class="implementation-header">
                        <div class="implementation-icon"><i class="fas fa-signature"></i></div>
                        <h4>Digital Signatures</h4>
                    </div>
                    <div class="implementation-content">
                        <p>Used for:</p>
                        <ul>
                            <li>Authenticating the source of digital documents</li>
                            <li>Ensuring document integrity</li>
                            <li>Non-repudiation in legal and financial contexts</li>
                            <li>Software code signing to verify authenticity</li>
                        </ul>
                    </div>
                </div>
                
                <div class="implementation-item">
                    <div class="implementation-header">
                        <div class="implementation-icon"><i class="fas fa-cloud"></i></div>
                        <h4>Cloud Storage</h4>
                    </div>
                    <div class="implementation-content">
                        <p>Cryptography enables:</p>
                        <ul>
                            <li>Encryption of data before it's uploaded to the cloud</li>
                            <li>Secure storage of sensitive information on third-party servers</li>
                            <li>Client-side encryption where only the user holds the decryption keys</li>
                        </ul>
                    </div>
                </div>
                
                <div class="implementation-item">
                    <div class="implementation-header">
                        <div class="implementation-icon"><i class="fas fa-key"></i></div>
                        <h4>Password Management</h4>
                    </div>
                    <div class="implementation-content">
                        <p>Password managers use cryptography to:</p>
                        <ul>
                            <li>Securely store encrypted passwords</li>
                            <li>Generate strong, unique passwords</li>
                            <li>Safely sync credentials across multiple devices</li>
                            <li>Use a master password to decrypt stored credentials</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Future Trends</h3>
            
            <div class="trends-container">
                <div class="trend-item">
                    <div class="trend-icon"><i class="fas fa-atom"></i></div>
                    <h4>Quantum Cryptography</h4>
                    <p>Leverages quantum mechanics principles to create theoretically unbreakable encryption, including quantum key distribution (QKD) that can detect eavesdropping attempts.</p>
                </div>
                
                <div class="trend-item">
                    <div class="trend-icon"><i class="fas fa-microchip"></i></div>
                    <h4>Post-Quantum Cryptography</h4>
                    <p>Development of encryption algorithms resistant to quantum computing attacks, protecting against future threats to current cryptographic systems.</p>
                </div>
                
                <div class="trend-item">
                    <div class="trend-icon"><i class="fas fa-brain"></i></div>
                    <h4>Homomorphic Encryption</h4>
                    <p>Allows computations on encrypted data without decrypting it first, enabling secure cloud computing and privacy-preserving data analysis.</p>
                </div>
                
                <div class="trend-item">
                    <div class="trend-icon"><i class="fas fa-user-shield"></i></div>
                    <h4>Zero-Knowledge Proofs</h4>
                    <p>Cryptographic methods that allow one party to prove knowledge of information without revealing the information itself, enhancing privacy in authentication.</p>
                </div>
            </div>
        </div>
        
        <div class="interactive-quiz">
            <h3 class="quiz-title"><i class="fas fa-question-circle"></i> Knowledge Check</h3>
            <div class="quiz-question">
                <p>What is the main purpose of cryptography?</p>
                <div class="quiz-options">
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-3" value="a"> To make computers faster
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-3" value="b"> To secure information
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-3" value="c"> To create computer games
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz1-3" value="d"> To design websites
                    </label>
                </div>
                <div class="quiz-feedback" style="display: none;">
                    <div class="correct-feedback">
                        <i class="fas fa-check-circle"></i> Correct! The main purpose of cryptography is to secure information by transforming it into a format that can only be read by authorized parties.
                    </div>
                    <div class="incorrect-feedback">
                        <i class="fas fa-times-circle"></i> Incorrect. Cryptography is fundamentally about securing information and communications through the use of codes and encryption techniques.
                    </div>
                </div>
                <button class="check-answer-btn" data-correct="b" onclick="checkAnswer(this, '1-3')">Check Answer</button>
            </div>
        </div>
    </div>
    
    <!-- Lesson 2-1: Caesar Cipher -->
    <div id="lesson2-1-content">
        <p class="mb-4">The Caesar cipher is one of the earliest and simplest encryption techniques. Named after Julius Caesar, who used it to communicate with his generals, this cipher works by shifting each letter in the plaintext by a fixed number of positions down the alphabet.</p>
        
        <div class="key-concept mb-5">
            <h4><i class="fas fa-key"></i> Key Concept</h4>
            <p>In a Caesar cipher, each letter in the plaintext is replaced by a letter a fixed number of positions further in the alphabet. This shift value acts as the encryption key.</p>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">How It Works</h3>
            
            <div class="two-column">
                <div class="column">
                    <h4 class="subsection-title">Encryption Process</h4>
                    <ol class="process-list">
                        <li>Choose a shift value (key) between 1 and 25</li>
                        <li>For each letter in the plaintext:
                            <ul>
                                <li>Shift it forward in the alphabet by the key amount</li>
                                <li>If shifting passes Z, wrap around to the beginning of the alphabet</li>
                            </ul>
                        </li>
                        <li>Non-alphabetic characters remain unchanged</li>
                    </ol>
                    
                    <div class="formula-box">
                        <h5>Mathematical Representation:</h5>
                        <p>For each plaintext letter p, the ciphertext letter c is:</p>
                        <div class="formula">c = (p + k) % 26</div>
                        <p>where k is the shift value and % represents modulo operation</p>
                    </div>
                </div>
                
                <div class="column">
                    <h4 class="subsection-title">Example: Shift of 3</h4>
                    <div class="cipher-example">
                        <div class="example-row">
                            <div class="label">Plaintext:</div>
                            <div class="value">HELLO WORLD</div>
                        </div>
                        <div class="example-row">
                            <div class="label">Shift:</div>
                            <div class="value">3</div>
                        </div>
                        <div class="example-row">
                            <div class="label">Ciphertext:</div>
                            <div class="value">KHOOR ZRUOG</div>
                        </div>
                        
                        <div class="letter-mapping">
                            <div class="mapping-item">H → K</div>
                            <div class="mapping-item">E → H</div>
                            <div class="mapping-item">L → O</div>
                            <div class="mapping-item">L → O</div>
                            <div class="mapping-item">O → R</div>
                            <div class="mapping-item">(space)</div>
                            <div class="mapping-item">W → Z</div>
                            <div class="mapping-item">O → R</div>
                            <div class="mapping-item">R → U</div>
                            <div class="mapping-item">L → O</div>
                            <div class="mapping-item">D → G</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Interactive Demo</h3>
            
            <div class="interactive-cipher-demo">
                <div class="demo-form">
                    <div class="form-group">
                        <label for="caesar-input">Plaintext:</label>
                        <input type="text" id="caesar-input" class="cipher-input" value="HELLO WORLD">
                    </div>
                    
                    <div class="form-group">
                        <label for="caesar-shift">Shift Value:</label>
                        <div class="shift-control">
                            <input type="range" id="caesar-shift" min="1" max="25" value="3" class="slider">
                            <span id="shift-display">3</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Ciphertext:</label>
                        <div id="caesar-output" class="cipher-output">KHOOR ZRUOG</div>
                    </div>
                </div>
                
                <div class="alphabet-visualization">
                    <div class="alphabet-row">
                        <div class="alphabet-letter">A</div>
                        <div class="alphabet-letter">B</div>
                        <div class="alphabet-letter">C</div>
                        <div class="alphabet-letter">D</div>
                        <div class="alphabet-letter">E</div>
                        <div class="alphabet-letter">F</div>
                        <div class="alphabet-letter">G</div>
                        <div class="alphabet-letter">H</div>
                        <div class="alphabet-letter">I</div>
                        <div class="alphabet-letter">J</div>
                        <div class="alphabet-letter">K</div>
                        <div class="alphabet-letter">L</div>
                        <div class="alphabet-letter">M</div>
                        <div class="alphabet-letter">N</div>
                        <div class="alphabet-letter">O</div>
                        <div class="alphabet-letter">P</div>
                        <div class="alphabet-letter">Q</div>
                        <div class="alphabet-letter">R</div>
                        <div class="alphabet-letter">S</div>
                        <div class="alphabet-letter">T</div>
                        <div class="alphabet-letter">U</div>
                        <div class="alphabet-letter">V</div>
                        <div class="alphabet-letter">W</div>
                        <div class="alphabet-letter">X</div>
                        <div class="alphabet-letter">Y</div>
                        <div class="alphabet-letter">Z</div>
                    </div>
                    <div class="alphabet-row shifted">
                        <div class="alphabet-letter">D</div>
                        <div class="alphabet-letter">E</div>
                        <div class="alphabet-letter">F</div>
                        <div class="alphabet-letter">G</div>
                        <div class="alphabet-letter">H</div>
                        <div class="alphabet-letter">I</div>
                        <div class="alphabet-letter">J</div>
                        <div class="alphabet-letter">K</div>
                        <div class="alphabet-letter">L</div>
                        <div class="alphabet-letter">M</div>
                        <div class="alphabet-letter">N</div>
                        <div class="alphabet-letter">O</div>
                        <div class="alphabet-letter">P</div>
                        <div class="alphabet-letter">Q</div>
                        <div class="alphabet-letter">R</div>
                        <div class="alphabet-letter">S</div>
                        <div class="alphabet-letter">T</div>
                        <div class="alphabet-letter">U</div>
                        <div class="alphabet-letter">V</div>
                        <div class="alphabet-letter">W</div>
                        <div class="alphabet-letter">X</div>
                        <div class="alphabet-letter">Y</div>
                        <div class="alphabet-letter">Z</div>
                        <div class="alphabet-letter">A</div>
                        <div class="alphabet-letter">B</div>
                        <div class="alphabet-letter">C</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Historical Context</h3>
            
            <div class="historical-info">
                <div class="history-image">
                    <div class="image-placeholder">
                        <i class="fas fa-crown"></i>
                    </div>
                </div>
                <div class="history-text">
                    <p>Julius Caesar used this cipher with a shift of 3 to protect sensitive military communications during the Gallic Wars in the 1st century BCE. According to the Roman historian Suetonius, Caesar replaced each letter in his messages with the letter that was three positions ahead in the alphabet.</p>
                    <p>The simplicity of the method made it practical for field use in ancient times when literacy itself was rare. Caesar's generals could easily encrypt and decrypt messages without complex tools or extensive training.</p>
                    <p>While revolutionary for its time, the Caesar cipher provided adequate security primarily because potential adversaries lacked the education and cryptanalytic knowledge to break it systematically.</p>
                </div>
            </div>
        </div>
        
        <div class="lesson-section mb-5">
            <h3 class="section-title">Security Analysis</h3>
            
            <div class="security-analysis">
                <div class="security-item">
                    <div class="security-icon negative"><i class="fas fa-unlock"></i></div>
                    <h4>Vulnerability to Brute Force</h4>
                    <p>With only 25 possible shift values, an attacker can easily try all possibilities until finding the correct decryption. This makes the Caesar cipher extremely vulnerable to brute force attacks.</p>
                </div>
                
                <div class="security-item">
                    <div class="security-icon negative"><i class="fas fa-chart-bar"></i></div>
                    <h4>Frequency Analysis</h4>
                    <p>The cipher doesn't change the frequency patterns of letters in the language. In English, 'E' is the most common letter, followed by 'T', 'A', and 'O'. By analyzing the frequencies of letters in the ciphertext, an attacker can easily determine the shift value.</p>
                </div>
                
                <div class="security-item">
                    <div class="security-icon negative"><i class="fas fa-times-circle"></i></div>
                    <h4>Modern Security Rating</h4>
                    <p>By today's standards, the Caesar cipher provides virtually no security. It is now primarily used for educational purposes as an introduction to cryptography concepts.</p>
                </div>
                
                <div class="warning-box">
                    <div class="warning-icon"><i class="fas fa-exclamation-triangle"></i></div>
                    <div class="warning-text">
                        <h4>Security Warning</h4>
                        <p>Never use the Caesar cipher for any sensitive or private information. It is intended for educational purposes only and provides no real security in the modern age.</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="interactive-quiz">
            <h3 class="quiz-title"><i class="fas fa-question-circle"></i> Knowledge Check</h3>
            <div class="quiz-question">
                <p>In a Caesar cipher with a shift of 3, how would the letter 'Z' be encrypted?</p>
                <div class="quiz-options">
                    <label class="quiz-option">
                        <input type="radio" name="quiz2-1" value="a"> C
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz2-1" value="b"> W
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz2-1" value="c"> A
                    </label>
                    <label class="quiz-option">
                        <input type="radio" name="quiz2-1" value="d"> X
                    </label>
                </div>
                <div class="quiz-feedback" style="display: none;">
                    <div class="correct-feedback">
                        <i class="fas fa-check-circle"></i> Correct! When we shift 'Z' by 3 positions, we wrap around the alphabet to get 'C' (Z → A → B → C).
                    </div>
                    <div class="incorrect-feedback">
                        <i class="fas fa-times-circle"></i> Incorrect. When shifting 'Z' by 3 positions, we need to wrap around to the beginning of the alphabet. So Z + 3 = C (Z → A → B → C).
                    </div>
                </div>
                <button class="check-answer-btn" data-correct="a" onclick="checkAnswer(this, '2-1')">Check Answer</button>
            </div>
        </div>
    </div>
    
    <!-- More lesson templates would be added here... -->

    <!-- Final Quiz Content -->
    <div id="final-quiz-content">
        <div class="final-quiz-intro">
            <h2 class="section-title">Cryptography Certification Quiz</h2>
            <p class="mb-4">Congratulations on completing all the modules! This final quiz will test your understanding of cryptographic concepts across all areas you've studied. Answer all questions correctly to earn your CipherLab Cryptography certification.</p>
            
            <div class="quiz-instructions">
                <h3><i class="fas fa-clipboard-list"></i> Instructions</h3>
                <ul>
                    <li>The quiz consists of 10 questions covering all modules</li>
                    <li>You need to score at least 80% to pass and receive your certification</li>
                    <li>You can retake the quiz if needed</li>
                    <li>Read each question carefully before answering</li>
                </ul>
            </div>
            
            <div class="start-quiz-container">
                <button id="begin-final-quiz" class="cta-button">
                    <i class="fas fa-play-circle"></i> Begin Certification Quiz
                </button>
            </div>
        </div>
        
        <div class="final-quiz-questions" style="display: none;">
            <div class="quiz-progress-indicator">
                <div class="question-counter">
                    Question <span id="current-question-num">1</span> of <span id="total-questions-num">10</span>
                </div>
                <div class="quiz-timer">
                    Time Remaining: <span id="quiz-time">15:00</span>
                </div>
            </div>
            
            <div id="quiz-questions-container">
                <!-- Question 1 -->
                <div class="quiz-question-container" data-question="1">
                    <h3 class="question-title">What is the main purpose of cryptography?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q1" value="a"> To analyze large datasets
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q1" value="b"> To secure information and communications
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q1" value="c"> To improve computer processing speed
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q1" value="d"> To develop artificial intelligence
                        </label>
                    </div>
                </div>
                
                <!-- Question 2 -->
                <div class="quiz-question-container" data-question="2" style="display: none;">
                    <h3 class="question-title">Which of the following is NOT a type of cryptography?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q2" value="a"> Symmetric key cryptography
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q2" value="b"> Asymmetric key cryptography
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q2" value="c"> Bidirectional key cryptography
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q2" value="d"> Hash functions
                        </label>
                    </div>
                </div>
                
                <!-- Question 3 -->
                <div class="quiz-question-container" data-question="3" style="display: none;">
                    <h3 class="question-title">In the Caesar cipher with a shift of 3, how would the word "ZEBRA" be encrypted?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q3" value="a"> CHEUD
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q3" value="b"> WHEUV
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q3" value="c"> CEBUD
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q3" value="d"> CHFUD
                        </label>
                    </div>
                </div>
                
                <!-- Question 4 -->
                <div class="quiz-question-container" data-question="4" style="display: none;">
                    <h3 class="question-title">What key property differentiates asymmetric encryption from symmetric encryption?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q4" value="a"> Asymmetric encryption is always faster
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q4" value="b"> Asymmetric encryption uses different keys for encryption and decryption
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q4" value="c"> Asymmetric encryption can only encrypt text, not binary data
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q4" value="d"> Asymmetric encryption doesn't require any keys
                        </label>
                    </div>
                </div>
                
                <!-- Question 5 -->
                <div class="quiz-question-container" data-question="5" style="display: none;">
                    <h3 class="question-title">Which of the following is NOT a property of secure hash functions?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q5" value="a"> Pre-image resistance
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q5" value="b"> Collision resistance
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q5" value="c"> Reversibility
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q5" value="d"> Second pre-image resistance
                        </label>
                    </div>
                </div>
                
                <!-- Question 6 -->
                <div class="quiz-question-container" data-question="6" style="display: none;">
                    <h3 class="question-title">Which encryption standard has replaced DES as the recommended standard for government information?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q6" value="a"> RSA
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q6" value="b"> 3DES
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q6" value="c"> AES
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q6" value="d"> MD5
                        </label>
                    </div>
                </div>
                
                <!-- Question 7 -->
                <div class="quiz-question-container" data-question="7" style="display: none;">
                    <h3 class="question-title">What is the primary weakness of the Caesar cipher?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q7" value="a"> It's too slow for modern computers
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q7" value="b"> It can only encrypt uppercase letters
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q7" value="c"> It has too many possible keys to try
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q7" value="d"> It has only 25 possible keys, making it vulnerable to brute force attacks
                        </label>
                    </div>
                </div>
                
                <!-- Question 8 -->
                <div class="quiz-question-container" data-question="8" style="display: none;">
                    <h3 class="question-title">In public key cryptography, which key is used to encrypt a message?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q8" value="a"> The sender's private key
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q8" value="b"> The recipient's private key
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q8" value="c"> The sender's public key
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q8" value="d"> The recipient's public key
                        </label>
                    </div>
                </div>
                
                <!-- Question 9 -->
                <div class="quiz-question-container" data-question="9" style="display: none;">
                    <h3 class="question-title">What cryptographic concept is being used when websites show a padlock icon in the browser address bar?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q9" value="a"> Caesar cipher
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q9" value="b"> SSL/TLS certificates
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q9" value="c"> Password hashing
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q9" value="d"> One-time pads
                        </label>
                    </div>
                </div>
                
                <!-- Question 10 -->
                <div class="quiz-question-container" data-question="10" style="display: none;">
                    <h3 class="question-title">Which of the following technologies is being developed to counter the threat quantum computers pose to current cryptography?</h3>
                    <div class="quiz-options">
                        <label class="quiz-option">
                            <input type="radio" name="final-q10" value="a"> Post-quantum cryptography
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q10" value="b"> Larger RSA keys
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q10" value="c"> More complex Caesar ciphers
                        </label>
                        <label class="quiz-option">
                            <input type="radio" name="final-q10" value="d"> Double encryption with AES
                        </label>
                    </div>
                </div>
            </div>
            
            <div class="quiz-navigation">
                <button id="prev-quiz-question" class="nav-button" disabled>
                    <i class="fas fa-chevron-left"></i> Previous
                </button>
                <button id="next-quiz-question" class="nav-button">
                    Next <i class="fas fa-chevron-right"></i>
                </button>
                <button id="submit-quiz" class="submit-quiz-button" style="display: none;">
                    <i class="fas fa-check-circle"></i> Submit Quiz
                </button>
            </div>
        </div>
        
        <div class="final-quiz-results" style="display: none;">
            <div class="results-header">
                <h2 class="section-title">Quiz Results</h2>
                <div class="results-summary">
                    <div class="score-container">
                        <div class="score-circle">
                            <div class="score-value" id="quiz-score-value">0</div>
                            <div class="score-percent">%</div>
                        </div>
                        <div class="pass-fail-badge" id="pass-fail-badge">Calculating...</div>
                    </div>
                    <div class="result-details">
                        <div class="result-item">
                            <div class="result-label">Total Questions:</div>
                            <div class="result-value">10</div>
                        </div>
                        <div class="result-item">
                            <div class="result-label">Correct Answers:</div>
                            <div class="result-value" id="correct-answers-count">0</div>
                        </div>
                        <div class="result-item">
                            <div class="result-label">Incorrect Answers:</div>
                            <div class="result-value" id="incorrect-answers-count">0</div>
                        </div>
                        <div class="result-item">
                            <div class="result-label">Time Taken:</div>
                            <div class="result-value" id="time-taken">00:00</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="certification-container" id="certification-container" style="display: none;">
                <div class="certificate">
                    <div class="certificate-header">
                        <div class="certificate-logo">CipherLab</div>
                        <h2 class="certificate-title">Certificate of Completion</h2>
                    </div>
                    <div class="certificate-body">
                        <p class="certificate-text">This certifies that</p>
                        <p class="certificate-name" id="certificate-name">Crypto Enthusiast</p>
                        <p class="certificate-text">has successfully completed the</p>
                        <p class="certificate-course">Cryptography Fundamentals Course</p>
                        <p class="certificate-date">Date: <span id="certificate-date"></span></p>
                    </div>
                    <div class="certificate-footer">
                        <div class="certificate-signature">
                            <div class="signature-line"></div>
                            <p>CipherLab Instructor</p>
                        </div>
                        <div class="certificate-seal">
                            <div class="seal-icon"><i class="fas fa-award"></i></div>
                        </div>
                    </div>
                </div>
                
                <div class="certificate-actions">
                    <button id="download-certificate" class="cta-button">
                        <i class="fas fa-download"></i> Download Certificate
                    </button>
                    <button id="share-certificate" class="cta-button cta-button-alt">
                        <i class="fas fa-share-alt"></i> Share Achievement
                    </button>
                </div>
            </div>
            
            <div class="quiz-review-container">
                <h3 class="review-title"><i class="fas fa-search"></i> Review Your Answers</h3>
                <div id="answers-review-container">
                    <!-- Review content will be dynamically generated -->
                </div>
                
                <div class="quiz-actions">
                    <button id="retake-quiz" class="cta-button cta-button-alt">
                        <i class="fas fa-redo"></i> Retake Quiz
                    </button>
                    <button id="return-to-modules" class="cta-button">
                        <i class="fas fa-home"></i> Return to Modules
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- CSS Styles -->
<style>
    /* Hero Section */
    .learn-hero {
        min-height: 40vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        padding: 3rem 1rem;
        position: relative;
        overflow: hidden;
        background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><text x="50%" y="50%" font-family="monospace" font-size="10" fill="rgba(0, 255, 65, 0.1)" text-anchor="middle" dominant-baseline="middle">01001001</text></svg>');
        background-size: 100px 100px;
    }
    
    .learn-hero::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle at center, rgba(0, 255, 65, 0.1) 0%, transparent 70%);
        z-index: -1;
    }
    
    /* Progress Tracker */
    .progress-tracker {
        margin-bottom: 2rem;
    }
    
    .progress-stats {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        color: var(--text-muted);
    }
    
    .progress-bar {
        height: 8px;
        background-color: var(--darker);
        border-radius: 4px;
        overflow: hidden;
    }
    
    .progress-value {
        height: 100%;
        background: linear-gradient(90deg, var(--primary-dark), var(--primary));
        transition: width 0.5s ease;
    }
    
    /* Module Styling */
    .learning-module {
        background-color: var(--medium-dark);
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 1.5rem;
        border: 1px solid var(--primary-dark);
        transition: all 0.3s ease;
    }
    
    .learning-module:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    
    .module-header {
        display: flex;
        align-items: center;
        padding: 1.5rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    
    .module-header:hover {
        background-color: var(--light-dark);
    }
    
    .module-icon {
        width: 50px;
        height: 50px;
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1.5rem;
        font-size: 1.5rem;
        color: var(--dark);
        flex-shrink: 0;
    }
    
    .module-title {
        flex-grow: 1;
    }
    
    .module-title h3 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }
    
    .module-title p {
        color: var(--text-muted);
        margin: 0.5rem 0 0 0;
    }
    
    .module-progress {
        display: flex;
        align-items: center;
        flex-shrink: 0;
    }
    
    .module-percentage {
        margin-right: 1rem;
        font-weight: 600;
        color: var(--primary);
    }
    
    .module-content {
        display: none;
        padding: 0 1.5rem 1.5rem;
        border-top: 1px solid var(--primary-dark);
    }
    
    .lessons-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }
    
    .lesson-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background-color: var(--darker);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .lesson-item:hover {
        background-color: var(--light-dark);
        transform: translateX(5px);
    }
    
    .lesson-status i {
        color: var(--text-muted);
        font-size: 1.25rem;
        transition: all 0.3s ease;
    }
    
    .lesson-status i.fa-check-circle {
        color: var(--primary);
    }
    
    /* Lesson Content Styling */
    .lesson-card {
        background-color: var(--medium-dark);
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 3rem;
        border: 1px solid var(--primary-dark);
    }
    
    .lesson-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
    }
    
    .nav-button {
        background-color: var(--darker);
        color: var(--text);
        border: 1px solid var(--primary-dark);
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .nav-button:hover {
        background-color: var(--light-dark);
        color: var(--primary);
    }
    
    .nav-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .lesson-complete-section {
        display: flex;
        justify-content: center;
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid var(--primary-dark);
    }
    
    .complete-button {
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        color: var(--dark);
        border: none;
        padding: 1rem 2rem;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        transition: all 0.3s ease;
    }
    
    .complete-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    
    .complete-button:disabled {
        background: linear-gradient(135deg, var(--text-muted), var(--light-dark));
        cursor: not-allowed;
    }
    
    .complete-button i {
        font-size: 1.25rem;
    }
    
    /* Lesson Content Elements */
    .key-concept {
        background-color: var(--darker);
        border-left: 4px solid var(--primary);
        padding: 1.5rem;
        border-radius: 0 6px 6px 0;
    }
    
    .key-concept h4 {
        color: var(--primary);
        margin-top: 0;
        margin-bottom: 0.75rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .lesson-section {
        margin-bottom: 2.5rem;
    }
    
    .section-title {
        color: var(--primary);
        font-size: 1.75rem;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--primary-dark);
    }
    
    .subsection-title {
        color: var(--primary);
        font-size: 1.25rem;
        margin: 1.5rem 0 1rem;
    }
    
    .two-column {
        display: flex;
        gap: 2rem;
        margin-bottom: 1.5rem;
    }
    
    .column {
        flex: 1;
    }
    
    .note-box {
        background-color: var(--darker);
        border-radius: 6px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .warning-box {
        background-color: rgba(255, 0, 0, 0.15);
        border-left: 4px solid #ff3e3e;
        padding: 1.5rem;
        border-radius: 0 6px 6px 0;
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .warning-icon {
        color: #ff3e3e;
        font-size: 2rem;
    }
    
    .warning-text h4 {
        color: #ff3e3e;
        margin-top: 0;
        margin-bottom: 0.5rem;
    }
    
    .process-list {
        list-style-type: decimal;
        padding-left: 1.5rem;
        margin-bottom: 1.5rem;
    }
    
    .process-list li {
        margin-bottom: 0.75rem;
    }
    
    .process-list ul {
        list-style-type: disc;
        padding-left: 1.5rem;
        margin: 0.5rem 0;
    }
    
    .formula-box {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 6px;
        margin: 1.5rem 0;
    }
    
    .formula {
        font-family: 'IBM Plex Mono', monospace;
        padding: 0.75rem;
        background-color: var(--dark);
        border-radius: 4px;
        margin: 0.75rem 0;
        text-align: center;
        font-size: 1.2rem;
    }
    
    .cipher-example {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 6px;
    }
    
    .example-row {
        display: flex;
        margin-bottom: 0.75rem;
    }
    
    .example-row .label {
        width: 100px;
        color: var(--text-muted);
        font-weight: 600;
    }
    
    .letter-mapping {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(70px, 1fr));
        gap: 0.5rem;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid var(--primary-dark);
    }
    
    .mapping-item {
        background-color: var(--dark);
        padding: 0.5rem;
        border-radius: 4px;
        text-align: center;
        font-family: 'IBM Plex Mono', monospace;
    }
    
    .interactive-cipher-demo {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 8px;
    }
    
    .demo-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        margin-bottom: 2rem;
    }
    
    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .cipher-input {
        background-color: var(--dark);
        border: 1px solid var(--primary-dark);
        color: var(--text);
        padding: 0.75rem;
        border-radius: 4px;
        font-family: 'IBM Plex Mono', monospace;
    }
    
    .cipher-output {
        background-color: var(--dark);
        border: 1px solid var(--primary-dark);
        padding: 0.75rem;
        border-radius: 4px;
        font-family: 'IBM Plex Mono', monospace;
    }
    
    .shift-control {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .slider {
        flex-grow: 1;
        height: 8px;
        background-color: var(--dark);
        border-radius: 4px;
        appearance: none;
        outline: none;
    }
    
    .slider::-webkit-slider-thumb {
        appearance: none;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--primary);
        cursor: pointer;
    }
    
    #shift-display {
        background-color: var(--primary);
        color: var(--dark);
        padding: 0.25rem 0.75rem;
        border-radius: 4px;
        font-weight: 600;
        min-width: 2.5rem;
        text-align: center;
    }
    
    .alphabet-visualization {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        overflow-x: auto;
    }
    
    .alphabet-row {
        display: flex;
        background-color: var(--dark);
        border-radius: 4px;
        padding: 0.75rem;
    }
    
    .alphabet-row.shifted {
        position: relative;
    }
    
    .alphabet-row.shifted::before {
        content: "↓";
        position: absolute;
        left: -25px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 1.5rem;
        color: var(--primary);
    }
    
    .alphabet-letter {
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: 'IBM Plex Mono', monospace;
    }
    
    .historical-info {
        display: flex;
        gap: 2rem;
        padding: 1.5rem;
        background-color: var(--darker);
        border-radius: 8px;
    }
    
    .history-image {
        flex-shrink: 0;
        width: 150px;
        height: 150px;
    }
    
    .image-placeholder {
        width: 100%;
        height: 100%;
        background-color: var(--dark);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 3rem;
        color: var(--primary);
    }
    
    .security-analysis {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }
    
    .security-item {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 8px;
    }
    
    .security-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }
    
    .security-icon.positive {
        background-color: rgba(39, 201, 63, 0.2);
        color: #27c93f;
    }
    
    .security-icon.negative {
        background-color: rgba(255, 62, 62, 0.2);
        color: #ff3e3e;
    }
    
    /* Quiz styling */
    .interactive-quiz {
        background-color: var(--dark);
        border-radius: 8px;
        padding: 1.5rem;
        border: 1px solid var(--primary-dark);
    }
    
    .quiz-title {
        color: var(--primary);
        margin-top: 0;
        margin-bottom: 1.5rem;
        font-size: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .quiz-options {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin: 1.5rem 0;
    }
    
    .quiz-option {
        background-color: var(--darker);
        padding: 1rem;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .quiz-option:hover {
        background-color: var(--light-dark);
    }
    
    .check-answer-btn {
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        color: var(--dark);
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .check-answer-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }
    
    .quiz-feedback {
        margin: 1.5rem 0;
        padding: 1rem;
        border-radius: 6px;
        background-color: var(--darker);
    }
    
    .correct-feedback {
        color: #27c93f;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .incorrect-feedback {
        color: #ff3e3e;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    /* Grid Containers */
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin: 1.5rem 0;
    }
    
    .grid-item {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 6px;
        text-align: center;
    }
    
    .principle-icon {
        font-size: 2rem;
        color: var(--primary);
        margin-bottom: 1rem;
    }
    
    .grid-item h4 {
        margin-top: 0;
        margin-bottom: 0.75rem;
        color: var(--text);
    }
    
    /* Timeline */
    .timeline {
        margin: 2rem 0;
        position: relative;
    }
    
    .timeline::before {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        left: 120px;
        width: 2px;
        background: linear-gradient(to bottom, var(--primary), var(--secondary));
    }
    
    .timeline-item {
        position: relative;
        margin-bottom: 2rem;
        display: flex;
    }
    
    .timeline-marker {
        width: 100px;
        margin-right: 40px;
        text-align: right;
        font-weight: 600;
        color: var(--primary);
        position: relative;
        flex-shrink: 0;
    }
    
    .timeline-marker::after {
        content: "";
        position: absolute;
        right: -20px;
        top: 50%;
        transform: translateY(-50%);
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background-color: var(--primary);
        z-index: 1;
    }
    
    .timeline-content {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 6px;
        flex-grow: 1;
    }
    
    .timeline-content h4 {
        margin-top: 0;
        margin-bottom: 0.75rem;
        color: var(--text);
    }
    
    /* Application Lists */
    .application-list {
        list-style-type: none;
        padding: 0;
        margin: 1.5rem 0;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }
    
    .application-list li {
        background-color: var(--darker);
        padding: 1rem;
        border-radius: 6px;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .application-list li i {
        color: var(--primary);
        font-size: 1.25rem;
        width: 20px;
        text-align: center;
    }
    
    /* Industry Grid */
    .industry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin: 1.5rem 0;
    }
    
    .industry-item {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    
    .industry-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    
    .industry-icon {
        font-size: 2.5rem;
        color: var(--primary);
        margin-bottom: 1rem;
    }
    
    .industry-item h4 {
        margin-top: 0;
        margin-bottom: 0.75rem;
    }
    
    /* Applications Container */
    .applications-container {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }
    
    .app-category {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 8px;
    }
    
    .app-category h4 {
        margin-top: 0;
        margin-bottom: 1.25rem;
        color: var(--primary);
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .app-items {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }
    
    .app-item {
        background-color: var(--dark);
        padding: 1rem;
        border-radius: 6px;
    }
    
    .app-item h5 {
        margin-top: 0;
        margin-bottom: 0.75rem;
        color: var(--text);
    }
    
    /* Implementation Grid */
    .implementation-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }
    
    .implementation-item {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 8px;
    }
    
    .implementation-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.25rem;
    }
    
    .implementation-icon {
        width: 50px;
        height: 50px;
        background-color: rgba(0, 255, 65, 0.1);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--primary);
        font-size: 1.5rem;
    }
    
    .implementation-header h4 {
        margin: 0;
        color: var(--primary);
    }
    
    .implementation-content ul {
        list-style-type: disc;
        padding-left: 1.5rem;
        margin: 1rem 0 0;
    }
    
    .implementation-content li {
        margin-bottom: 0.5rem;
    }
    
    /* Trends Container */
    .trends-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }
    
    .trend-item {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    
    .trend-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    
    .trend-icon {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, var(--primary-dark), var(--secondary));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--dark);
        font-size: 1.75rem;
        margin-bottom: 1.25rem;
    }
    
    .trend-item h4 {
        margin-top: 0;
        margin-bottom: 0.75rem;
        color: var(--text);
    }
    
    /* Attributes Container */
    .attributes-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin: 1.5rem 0;
    }
    
    .attribute {
        background-color: var(--darker);
        padding: 1.5rem;
        border-radius: 8px;
        text-align: center;
    }
    
    .attribute-icon {
        font-size: 2rem;
        color: var(--primary);
        margin-bottom: 0.75rem;
    }
    
    .attribute h5 {
        margin-top: 0;
        margin-bottom: 0.75rem;
        color: var(--text);
    }
    
    /* Algorithm Lists */
    .algorithm-list {
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
        margin: 1.25rem 0;
    }
    
    .algorithm-item {
        background-color: var(--dark);
        padding: 1.25rem;
        border-radius: 6px;
    }
    
    .algorithm-item h5 {
        margin-top: 0;
        margin-bottom: 0.75rem;
        color: var(--primary);
    }
    
    .algorithm-item ul {
        list-style-type: disc;
        padding-left: 1.25rem;
        margin: 0;
    }
    
    .algorithm-item li {
        margin-bottom: 0.5rem;
    }
    
    /* Media queries for responsive design */
    @media (max-width: 992px) {
        .two-column {
            flex-direction: column;
        }
        
        .historical-info {
            flex-direction: column;
        }
        
        .history-image {
            width: 100%;
            max-width: 250px;
            margin: 0 auto 1.5rem;
        }
    }
    
    @media (max-width: 768px) {
        .module-header {
            flex-direction: column;
            text-align: center;
        }
        
        .module-icon {
            margin-right: 0;
            margin-bottom: 1rem;
        }
        
        .module-progress {
            margin-top: 1rem;
        }
        
        .timeline::before {
            left: 20px;
        }
        
        .timeline-item {
            flex-direction: column;
        }
        
        .timeline-marker {
            width: 100%;
            text-align: left;
            padding-left: 40px;
            margin-bottom: 0.75rem;
        }
        
        .timeline-marker::after {
            left: 20px;
            right: auto;
        }
    }
</style>

<!-- JavaScript Functionality -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize progress tracking
        updateProgress();
        
        // Initialize module click handlers
        const moduleHeaders = document.querySelectorAll('.module-header');
        moduleHeaders.forEach(header => {
            const contentId = header.getAttribute('onclick').match(/'([^']+)'/)[1];
            header.addEventListener('click', function() {
                toggleModule(contentId);
            });
        });
        
        // Initialize lesson navigation
        const prevButton = document.getElementById('prev-lesson');
        const nextButton = document.getElementById('next-lesson');
        const completeButton = document.getElementById('complete-lesson');
        
        if (prevButton) {
            prevButton.addEventListener('click', navigateToPreviousLesson);
        }
        
        if (nextButton) {
            nextButton.addEventListener('click', navigateToNextLesson);
        }
        
        if (completeButton) {
            completeButton.addEventListener('click', completeCurrentLesson);
        }
        
        // Initialize quiz functionality
        const quizButtons = document.querySelectorAll('.check-answer-btn');
        quizButtons.forEach(button => {
            button.addEventListener('click', function() {
                checkAnswer(this);
            });
        });
        
        // Interactive Caesar cipher demo
        const caesarInput = document.getElementById('caesar-input');
        const caesarShift = document.getElementById('caesar-shift');
        const caesarOutput = document.getElementById('caesar-output');
        const shiftDisplay = document.getElementById('shift-display');
        const alphabetShifted = document.querySelector('.alphabet-row.shifted');
        
        if (caesarInput && caesarShift && caesarOutput && shiftDisplay) {
            caesarShift.addEventListener('input', function() {
                const shift = parseInt(this.value);
                shiftDisplay.textContent = shift;
                
                // Update Caesar cipher output
                const text = caesarInput.value.toUpperCase();
                let result = '';
                
                for (let i = 0; i < text.length; i++) {
                    const char = text.charAt(i);
                    
                    if (char.match(/[A-Z]/)) {
                        const code = text.charCodeAt(i);
                        result += String.fromCharCode(((code - 65 + shift) % 26) + 65);
                    } else {
                        result += char;
                    }
                }
                
                caesarOutput.textContent = result;
                
                // Update shifted alphabet visualization
                updateShiftedAlphabet(shift);
            });
            
            caesarInput.addEventListener('input', function() {
                const shift = parseInt(caesarShift.value);
                const text = this.value.toUpperCase();
                let result = '';
                
                for (let i = 0; i < text.length; i++) {
                    const char = text.charAt(i);
                    
                    if (char.match(/[A-Z]/)) {
                        const code = text.charCodeAt(i);
                        result += String.fromCharCode(((code - 65 + shift) % 26) + 65);
                    } else {
                        result += char;
                    }
                }
                
                caesarOutput.textContent = result;
            });
        }
        
        function updateShiftedAlphabet(shift) {
            if (!alphabetShifted) return;
            
            alphabetShifted.innerHTML = '';
            for (let i = 0; i < 26; i++) {
                const shifted = (i + shift) % 26;
                const letter = String.fromCharCode(65 + shifted);
                const letterDiv = document.createElement('div');
                letterDiv.className = 'alphabet-letter';
                letterDiv.textContent = letter;
                alphabetShifted.appendChild(letterDiv);
            }
        }
    });
    
    // Toggle module content
    function toggleModule(contentId) {
        const content = document.getElementById(contentId);
        if (content.style.display === 'block') {
            content.style.display = 'none';
        } else {
            content.style.display = 'block';
        }
    }
    
    // Show lesson content
    function showLesson(lessonId) {
        // Get module and lesson indices
        const [modulePrefix, lessonNumber] = lessonId.split('-');
        const moduleIndex = modulePrefix.replace('lesson', '');
        const lessonIndex = lessonNumber;
        
        // Set current lesson data
        currentModule = moduleIndex;
        currentLesson = lessonIndex;
        
        // Show lesson content section
        document.getElementById('lesson-content-section').style.display = 'block';
        
        // Scroll to lesson content
        document.getElementById('lesson-content-section').scrollIntoView({ behavior: 'smooth' });
        
        // Load lesson content
        const lessonContentId = `${lessonId}-content`;
        const lessonContent = document.getElementById(lessonContentId);
        const lessonTitle = document.querySelector(`[onclick="showLesson('${lessonId}')"] .lesson-title`).textContent;
        
        document.getElementById('lesson-title').textContent = lessonTitle;
        document.getElementById('lesson-content').innerHTML = lessonContent.innerHTML;
        
        // Update navigation buttons
        updateNavigation(moduleIndex, lessonIndex);
        
        // Update complete button state
        updateCompleteButtonState(moduleIndex, lessonIndex);
    }
    
    // Navigation functions
    function navigateToPreviousLesson() {
        // Implementation will depend on lesson structure
        console.log('Navigate to previous lesson');
    }
    
    function navigateToNextLesson() {
        // Implementation will depend on lesson structure
        console.log('Navigate to next lesson');
    }
    
    // Update navigation buttons
    function updateNavigation(moduleIndex, lessonIndex) {
        // Implementation will depend on lesson structure
        console.log('Update navigation for module ' + moduleIndex + ', lesson ' + lessonIndex);
    }
    
    // Complete current lesson
    function completeCurrentLesson() {
        // Get current lesson information from URL or state
        const moduleIndex = currentModule;
        const lessonIndex = currentLesson;
        
        // Mark lesson as completed
        const lessonKey = `${moduleIndex}-${lessonIndex}`;
        const completedLessons = getCompletedLessons();
        
        if (!completedLessons.includes(lessonKey)) {
            completedLessons.push(lessonKey);
            localStorage.setItem('cipherlab-completed-lessons', JSON.stringify(completedLessons));
            
            // Update UI
            const statusIcon = document.getElementById(`status-${moduleIndex}-${lessonIndex}`);
            if (statusIcon) {
                statusIcon.className = 'fas fa-check-circle';
            }
            
            // Update progress
            updateProgress();
            
            // Show completion feedback
            showCompletionFeedback();
        }
        
        // Disable complete button
        document.getElementById('complete-lesson').disabled = true;
    }
    
    // Update complete button state
    function updateCompleteButtonState(moduleIndex, lessonIndex) {
        const lessonKey = `${moduleIndex}-${lessonIndex}`;
        const completedLessons = getCompletedLessons();
        const completeButton = document.getElementById('complete-lesson');
        
        if (completedLessons.includes(lessonKey)) {
            completeButton.disabled = true;
            completeButton.innerHTML = '<i class="fas fa-check-circle"></i> Completed';
        } else {
            completeButton.disabled = false;
            completeButton.innerHTML = '<i class="fas fa-check-circle"></i> Mark as Complete';
        }
    }
    
    // Show completion feedback
    function showCompletionFeedback() {
        // Implementation will depend on UI design
        console.log('Show completion feedback');
    }
    
    // Get completed lessons from localStorage
    function getCompletedLessons() {
        const stored = localStorage.getItem('cipherlab-completed-lessons');
        return stored ? JSON.parse(stored) : [];
    }
    
    // Update overall progress
    function updateProgress() {
        const completedLessons = getCompletedLessons();
        
        // Count total lessons
        const totalLessons = document.querySelectorAll('.lesson-item').length;
        
        // Update progress stats
        document.getElementById('completed-count').textContent = completedLessons.length;
        document.getElementById('total-count').textContent = totalLessons;
        
        // Calculate percentage
        const percentage = totalLessons > 0 ? Math.round((completedLessons.length / totalLessons) * 100) : 0;
        document.getElementById('percentage').textContent = `${percentage}%`;
        document.getElementById('progress-value').style.width = `${percentage}%`;
        
        // Update module progress
        updateModuleProgress(completedLessons);
        
        // Update lesson status icons
        updateLessonStatusIcons(completedLessons);
    }
    
    // Update module progress
    function updateModuleProgress(completedLessons) {
        const modules = document.querySelectorAll('.learning-module');
        
        modules.forEach((module, moduleIndex) => {
            const moduleId = module.id;
            const lessons = module.querySelectorAll('.lesson-item');
            const completedModuleLessons = completedLessons.filter(lesson => lesson.startsWith(`${moduleIndex + 1}-`));
            
            const modulePercentage = lessons.length > 0 ? Math.round((completedModuleLessons.length / lessons.length) * 100) : 0;
            
            // Update module percentage display
            const modulePercentageElement = module.querySelector('.module-percentage');
            if (modulePercentageElement) {
                modulePercentageElement.textContent = `${modulePercentage}%`;
            }
            
            // Update module header color based on progress
            const moduleHeader = module.querySelector('.module-header');
            if (moduleHeader) {
                if (modulePercentage === 100) {
                    moduleHeader.style.borderLeft = '4px solid var(--primary)';
                } else if (modulePercentage > 0) {
                    moduleHeader.style.borderLeft = '4px solid var(--secondary)';
                }
            }
        });
    }
    
    // Update lesson status icons
    function updateLessonStatusIcons(completedLessons) {
        const lessons = document.querySelectorAll('.lesson-item');
        
        lessons.forEach((lesson) => {
            const onclick = lesson.getAttribute('onclick');
            const lessonId = onclick.match(/'([^']+)'/)[1];
            const [modulePrefix, lessonNumber] = lessonId.split('-');
            const moduleIndex = modulePrefix.replace('lesson', '');
            const lessonIndex = lessonNumber;
            
            const lessonKey = `${moduleIndex}-${lessonIndex}`;
            const statusIcon = document.getElementById(`status-${moduleIndex}-${lessonIndex}`);
            
            if (statusIcon) {
                if (completedLessons.includes(lessonKey)) {
                    statusIcon.className = 'fas fa-check-circle';
                } else {
                    statusIcon.className = 'far fa-circle';
                }
            }
        });
    }
    
    // Check quiz answers
    function checkAnswer(button, lessonKey) {
        const correctAnswer = button.getAttribute('data-correct');
        const questionContainer = button.closest('.quiz-question');
        const selectedOption = questionContainer.querySelector('input[name^="quiz"]:checked');
        const feedbackContainer = questionContainer.querySelector('.quiz-feedback');
        
        if (!selectedOption) {
            alert('Please select an answer before checking!');
            return;
        }
        
        feedbackContainer.style.display = 'block';
        
        if (selectedOption.value === correctAnswer) {
            // Correct answer
            feedbackContainer.querySelector('.correct-feedback').style.display = 'block';
            feedbackContainer.querySelector('.incorrect-feedback').style.display = 'none';
            
            // Mark lesson as completed if not already completed
            if (lessonKey) {
                const completedLessons = getCompletedLessons();
                if (!completedLessons.includes(lessonKey)) {
                    completedLessons.push(lessonKey);
                    localStorage.setItem('cipherlab-completed-lessons', JSON.stringify(completedLessons));
                    
                    // Update UI
                    const statusIcon = document.getElementById(`status-${lessonKey}`);
                    if (statusIcon) {
                        statusIcon.className = 'fas fa-check-circle';
                    }
                    
                    // Update progress
                    updateProgress();
                }
            }
        } else {
            // Incorrect answer
            feedbackContainer.querySelector('.correct-feedback').style.display = 'none';
            feedbackContainer.querySelector('.incorrect-feedback').style.display = 'block';
        }
        
        // Disable all options and the check button
        questionContainer.querySelectorAll('input[name^="quiz"]').forEach(input => {
            input.disabled = true;
        });
        button.disabled = true;
    }
    
    // Current module and lesson tracking
    let currentModule = null;
    let currentLesson = null;
</script>