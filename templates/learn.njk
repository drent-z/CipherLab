---
layout: layout.njk
title: Learn Cryptography - CipherLab
---
<div class="hero" id="learn-hero">
    <div class="hero-gradient-container"></div>
    <div class="row hero-row">
        <div class="col-12 text-center">
            <h1 class="glitch" data-text="Learn Cryptography">
                <span>Learn Cryptography</span>
                <span aria-hidden="true">Learn Cryptography</span>
                <span aria-hidden="true">Learn Cryptography</span>
            </h1>
            <p class="mb-4 fade-in hero-subtitle">Master the art and science of cryptography through interactive modules and hands-on exercises</p>
        </div>
    </div>
    
    <!-- Animated binary code decoration -->
    <div class="binary-stream">01001100 01000101 01000001 01010010 01001110</div>
</div>

<section class="container section">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <!-- Progress Overview Card -->
            <div class="progress-overview-card fade-in mb-4">
                <div class="progress-header">
                    <h2><i class="fas fa-chart-line"></i> Your Progress</h2>
                    <div class="progress-stats">
                        <span>Completed: <span id="completed-count">0</span>/<span id="total-count">15</span></span>
                        <span id="percentage">0%</span>
                    </div>
                </div>
                <div class="progress-bar-container">
                    <div class="progress-bar">
                        <div class="progress-value" id="progress-value" style="width: 0%;"></div>
                    </div>
                </div>
            </div>
            
            <!-- Module Navigation Tabs -->
            <div class="module-tabs-container fade-in">
                <div class="module-tabs">
                    <button class="module-tab active" data-module="module1">
                        <i class="fas fa-key"></i>
                        <span>Fundamentals</span>
                    </button>
                    <button class="module-tab" data-module="module2">
                        <i class="fas fa-history"></i>
                        <span>Classical</span>
                    </button>
                    <button class="module-tab" data-module="module3">
                        <i class="fas fa-shield-alt"></i>
                        <span>Modern</span>
                    </button>
                    <button class="module-tab" data-module="module4">
                        <i class="fas fa-globe"></i>
                        <span>Applications</span>
                    </button>
                    <button class="module-tab" data-module="module5">
                        <i class="fas fa-brain"></i>
                        <span>Advanced</span>
                    </button>
                </div>
                
                <!-- Module Content Panels -->
                <div class="module-content-panels">
                    <!-- Module 1 Panel -->
                    <div class="module-panel active" id="module1-panel">
                        <div class="module-panel-header">
                            <h3>Module 1: Fundamentals of Cryptography</h3>
                            <p>Learn the basic concepts and terminology of cryptography</p>
                        </div>
                        <div class="lessons-grid">
                            <div class="lesson-card" onclick="showLesson('lesson1-1')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">What is Cryptography?</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson1-1"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson1-2')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Types of Cryptography</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson1-2"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson1-3')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">The Use of Cryptography in the Real World</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson1-3"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Module 2 Panel -->
                    <div class="module-panel" id="module2-panel">
                        <div class="module-panel-header">
                            <h3>Module 2: Classical Ciphers</h3>
                            <p>Explore historical encryption techniques and their implementations</p>
                        </div>
                        <div class="lessons-grid">
                            <div class="lesson-card" onclick="showLesson('lesson2-1')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Caesar Cipher</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson2-1"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson2-2')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Vigen√®re Cipher</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson2-2"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson2-3')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Substitution Cipher</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson2-3"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Module 3 Panel -->
                    <div class="module-panel" id="module3-panel">
                        <div class="module-panel-header">
                            <h3>Module 3: Modern Cryptography</h3>
                            <p>Understand contemporary encryption algorithms and techniques</p>
                        </div>
                        <div class="lessons-grid">
                            <div class="lesson-card" onclick="showLesson('lesson3-1')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Symmetric Encryption</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson3-1"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson3-2')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Asymmetric Encryption</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson3-2"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson3-3')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Hash Functions</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson3-3"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Module 4 Panel -->
                    <div class="module-panel" id="module4-panel">
                        <div class="module-panel-header">
                            <h3>Module 4: Practical Applications</h3>
                            <p>Apply cryptographic principles to real-world security challenges</p>
                        </div>
                        <div class="lessons-grid">
                            <div class="lesson-card" onclick="showLesson('lesson4-1')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Secure Communications</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson4-1"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson4-2')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Digital Signatures & PKI</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson4-2"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson4-3')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Blockchain & Cryptocurrencies</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson4-3"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Module 5 Panel -->
                    <div class="module-panel" id="module5-panel">
                        <div class="module-panel-header">
                            <h3>Module 5: Advanced Topics</h3>
                            <p>Discover cutting-edge cryptographic concepts and future directions</p>
                        </div>
                        <div class="lessons-grid">
                            <div class="lesson-card" onclick="showLesson('lesson5-1')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Quantum Cryptography</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson5-1"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson5-2')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Zero-Knowledge Proofs</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson5-2"></i></div>
                                </div>
                            </div>
                            <div class="lesson-card" onclick="showLesson('lesson5-3')">
                                <div class="lesson-card-inner">
                                    <div class="lesson-title">Homomorphic Encryption</div>
                                    <div class="lesson-status"><i class="far fa-circle" id="status-lesson5-3"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Final Quiz Section -->
            {% include "learn/final-quiz.njk" %}
        </div>
    </div>
</section>

<section class="container section" id="lesson-content-section" style="display: none;">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="lesson-card fade-in">
                <div class="card-header">
                    <div class="lesson-nav">
                        <button id="prev-lesson" class="nav-button"><i class="fas fa-chevron-left"></i> Previous</button>
                        <h2 id="lesson-title" class="mb-0"></h2>
                        <button id="next-lesson" class="nav-button">Next <i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="lesson-content">
                        <!-- Lesson content will be loaded here -->
                    </div>
                    
                    <div class="lesson-navigation">
                        <button id="prev-lesson-bottom" class="nav-button"><i class="fas fa-chevron-left"></i> Previous</button>
                        <button id="complete-lesson" class="complete-button">
                            <i class="fas fa-check-circle"></i> Mark as Complete
                        </button>
                        <button id="next-lesson-bottom" class="nav-button">Next <i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Lesson Content Templates -->
<div id="lesson-templates" style="display: none;">
    <!-- Include the lesson content templates -->
    {% include "learn/lesson-templates.njk" %}
</div>

<!-- CSS Styles -->
<style>
    /* Hero Section */
    #learn-hero {
        min-height: 35vh;
        background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), 
                    url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><text x="50%" y="50%" font-family="monospace" font-size="10" fill="rgba(0, 255, 65, 0.1)" text-anchor="middle" dominant-baseline="middle">01001001</text></svg>');
        background-size: 100px 100px;
        display: flex;
        align-items: center;
        margin-bottom: 2rem;
    }
    
    /* Binary stream decoration */
    .binary-stream {
        position: absolute;
        bottom: 20px;
        left: 0;
        width: 100%;
        font-family: 'IBM Plex Mono', monospace;
        color: var(--primary);
        opacity: 0.7;
        font-size: 1.2rem;
        text-align: center;
        letter-spacing: 5px;
        animation: float 3s ease-in-out infinite;
    }
    
    @keyframes float {
        0% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
        100% { transform: translateY(0); }
    }
    
    /* Progress Overview Card */
    .progress-overview-card {
        background-color: var(--medium-dark);
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        padding: 1.5rem;
        margin-bottom: 2rem;
        border: 1px solid var(--primary-dark);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .progress-overview-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    }
    
    .progress-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        flex-wrap: wrap;
        gap: 1rem;
    }
    
    .progress-header h2 {
        margin: 0;
        font-size: 1.5rem;
        color: var(--primary);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .progress-stats {
        display: flex;
        gap: 1.5rem;
        color: var(--text);
        font-weight: 500;
    }
    
    .progress-bar-container {
        padding: 0.5rem 0;
    }
    
    .progress-bar {
        height: 10px;
        background-color: var(--darker);
        border-radius: 5px;
        overflow: hidden;
    }
    
    .progress-value {
        height: 100%;
        background: linear-gradient(90deg, var(--primary-dark), var(--primary));
        border-radius: 5px;
        transition: width 0.5s ease;
    }
    
    /* Module Tabs */
    .module-tabs-container {
        margin-bottom: 2rem;
    }
    
    .module-tabs {
        display: flex;
        gap: 0.5rem;
        overflow-x: auto;
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
        scroll-behavior: smooth;
    }
    
    .module-tab {
        background: var(--darker);
        border: 1px solid var(--primary-dark);
        color: var(--text);
        padding: 0.75rem 1.25rem;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 110px;
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }
    
    .module-tab i {
        font-size: 1.5rem;
        color: var(--primary-dark);
        transition: color 0.3s ease;
    }
    
    .module-tab span {
        font-size: 0.9rem;
        font-weight: 500;
    }
    
    .module-tab:hover {
        transform: translateY(-3px);
        background: var(--medium-dark);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
    
    .module-tab.active {
        background: linear-gradient(to bottom, var(--primary-dark), var(--medium-dark));
        border: 1px solid var(--primary);
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
    
    .module-tab.active i {
        color: var(--primary);
    }
    
    /* Module Panels */
    .module-content-panels {
        background-color: var(--medium-dark);
        border-radius: 10px;
        border: 1px solid var(--primary-dark);
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
        margin-bottom: 2rem;
        position: relative;
        min-height: 350px;
    }
    
    .module-panel {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.4s ease, visibility 0.4s ease;
    }
    
    .module-panel.active {
        opacity: 1;
        visibility: visible;
        position: relative;
    }
    
    .module-panel-header {
        background-color: var(--darker);
        padding: 1.5rem;
        border-bottom: 1px solid var(--primary-dark);
    }
    
    .module-panel-header h3 {
        margin: 0;
        font-size: 1.5rem;
        color: var(--primary);
    }
    
    .module-panel-header p {
        margin: 0.5rem 0 0 0;
        color: var(--text-muted);
    }
    
    .lessons-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.25rem;
        padding: 1.5rem;
    }
    
    .lesson-card {
        background-color: var(--darker);
        border-radius: 8px;
        overflow: hidden;
        cursor: pointer;
        transition: all 0.3s ease;
        border: 1px solid var(--primary-dark);
        height: 100%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }
    
    .lesson-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        border-color: var(--primary);
    }
    
    .lesson-card-inner {
        padding: 1.25rem;
        position: relative;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .lesson-title {
        font-weight: 500;
        margin-bottom: 1.5rem;
        flex-grow: 1;
    }
    
    .lesson-status {
        text-align: right;
    }
    
    .lesson-status i {
        color: var(--text-muted);
        font-size: 1.25rem;
        transition: all 0.3s ease;
    }
    
    .lesson-status i.fa-check-circle {
        color: var(--primary);
    }
    
    /* Lesson Content Styling */
    .lesson-card {
        background-color: var(--medium-dark);
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 3rem;
        border: 1px solid var(--primary-dark);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    }
    
    .lesson-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.25rem 1.5rem;
        background-color: var(--darker);
        border-bottom: 1px solid var(--primary-dark);
    }
    
    .nav-button {
        background-color: var(--medium-dark);
        color: var(--text);
        border: 1px solid var(--primary-dark);
        padding: 0.5rem 1rem;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
    }
    
    .nav-button:hover:not(:disabled) {
        background-color: var(--primary-dark);
        color: var(--dark);
    }
    
    .nav-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .lesson-navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid var(--primary-dark);
    }
    
    .complete-button {
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        color: var(--dark);
        border: none;
        padding: 0.8rem 1.75rem;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .complete-button:hover:not(:disabled) {
        transform: translateY(-3px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    }
    
    .complete-button:disabled {
        background: linear-gradient(135deg, var(--text-muted), var(--light-dark));
        cursor: not-allowed;
    }
    
    .complete-button i {
        font-size: 1.25rem;
    }
    
    /* Final Quiz Card */
    .final-quiz-container {
        margin-top: 1.5rem;
    }
    
    .final-quiz-card {
        background-color: var(--medium-dark);
        border-radius: 10px;
        border: 1px solid var(--primary-dark);
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease;
    }
    
    .final-quiz-card:hover {
        transform: translateY(-5px);
    }
    
    .final-quiz-header {
        background-color: var(--darker);
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1.5rem;
        border-bottom: 1px solid var(--primary-dark);
    }
    
    .quiz-icon {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, var(--secondary), var(--primary));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.8rem;
        color: var(--dark);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .quiz-info {
        flex-grow: 1;
    }
    
    .quiz-info h3 {
        margin: 0 0 0.5rem 0;
        font-size: 1.5rem;
        color: var(--primary);
    }
    
    .quiz-info p {
        margin: 0;
        color: var(--text-muted);
    }
    
    .quiz-status {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
    }
    
    .quiz-status-text {
        font-weight: 600;
    }
    
    .final-quiz-footer {
        padding: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .requirements {
        flex-grow: 1;
    }
    
    .requirements p {
        margin: 0 0 0.5rem 0;
        color: var(--text-muted);
    }
    
    .quiz-progress {
        height: 8px;
        background-color: var(--darker);
        border-radius: 4px;
        overflow: hidden;
        width: 100%;
        margin-top: 0.5rem;
    }
    
    .quiz-progress-value {
        height: 100%;
        background: linear-gradient(90deg, var(--primary-dark), var(--primary));
        transition: width 0.5s ease;
    }
    
    .final-quiz-button {
        background: linear-gradient(135deg, var(--secondary), var(--primary));
        color: var(--dark);
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .final-quiz-button:hover:not([disabled]) {
        transform: translateY(-3px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    }
    
    .final-quiz-button:disabled {
        background: linear-gradient(135deg, var(--darker), var(--medium-dark));
        color: var(--text-muted);
        cursor: not-allowed;
    }
    
    /* Lesson Content Styling */
    #lesson-content {
        padding: 1.5rem;
    }
    
    #lesson-content h3 {
        color: var(--primary);
        margin-top: 2rem;
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }
    
    #lesson-content h4 {
        color: var(--text);
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
        font-size: 1.2rem;
    }
    
    #lesson-content p {
        margin-bottom: 1.25rem;
        line-height: 1.6;
    }
    
    .key-concept {
        background-color: rgba(0, 255, 65, 0.1);
        border-left: 4px solid var(--primary);
        padding: 1.25rem;
        margin: 1.5rem 0;
        border-radius: 6px;
    }
    
    .key-concept h4 {
        color: var(--primary) !important;
        margin-top: 0 !important;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .interactive-quiz {
        background-color: var(--darker);
        border-radius: 8px;
        padding: 1.5rem;
        margin: 2rem 0;
    }
    
    .quiz-title {
        color: var(--primary);
        margin-top: 0;
        margin-bottom: 1.25rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .quiz-options {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin: 1rem 0;
    }
    
    .quiz-option {
        display: flex;
        align-items: center;
        padding: 0.75rem 1rem;
        background-color: var(--medium-dark);
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }
    
    .quiz-option:hover {
        background-color: var(--light-dark);
    }
    
    .quiz-option input {
        margin-right: 0.75rem;
    }
    
    .quiz-feedback {
        background-color: var(--medium-dark);
        padding: 1rem;
        border-radius: 6px;
        margin: 1rem 0;
    }
    
    .correct-feedback {
        color: var(--primary);
    }
    
    .incorrect-feedback {
        color: #ff4d4d;
    }
    
    .check-answer-btn {
        background-color: var(--primary-dark);
        color: var(--dark);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s ease;
    }
    
    .check-answer-btn:hover {
        background-color: var(--primary);
    }
    
    /* Media Queries */
    @media (max-width: 992px) {
        .final-quiz-header {
            flex-direction: column;
            text-align: center;
        }
        
        .final-quiz-footer {
            flex-direction: column;
            gap: 1.25rem;
        }
        
        .quiz-info {
            text-align: center;
        }
        
        .lessons-grid {
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        }
    }
    
    @media (max-width: 768px) {
        .progress-header {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .module-tabs {
            justify-content: flex-start;
            padding-bottom: 10px;
        }
        
        .module-tab {
            min-width: 90px;
            padding: 0.6rem 1rem;
        }
        
        .module-tab i {
            font-size: 1.3rem;
        }
        
        .module-tab span {
            font-size: 0.8rem;
        }
        
        .lessons-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }
        
        .lesson-navigation {
            flex-direction: column;
            gap: 1rem;
        }
        
        .lesson-nav {
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        #lesson-title {
            width: 100%;
            text-align: center;
            order: -1;
            margin-bottom: 0.75rem;
        }
        
        .nav-button {
            flex: 1;
            justify-content: center;
        }
    }
    
    @media (max-width: 576px) {
        .module-tabs {
            gap: 0.25rem;
        }
        
        .module-tab {
            min-width: 70px;
            padding: 0.5rem 0.75rem;
        }
        
        .module-tab i {
            font-size: 1.2rem;
        }
        
        .module-tab span {
            font-size: 0.75rem;
        }
        
        .quiz-icon {
            width: 45px;
            height: 45px;
            font-size: 1.4rem;
        }
        
        .module-panel-header h3 {
            font-size: 1.3rem;
        }
    }
</style>

<!-- JavaScript for Interactive Functionality -->
<script>
    // Store quiz data in localStorage to maintain state between pages
    function saveQuizProgress() {
        const progress = {
            completedLessons: completedLessons,
            totalLessons: totalLessons
        };
        localStorage.setItem('cipherLabQuizProgress', JSON.stringify(progress));
    }
    
    // Load quiz progress from localStorage
    function loadQuizProgress() {
        const progressData = localStorage.getItem('cipherLabQuizProgress');
        if (progressData) {
            const progress = JSON.parse(progressData);
            return progress.completedLessons || [];
        }
        return [];
    }
    
    // Initialize the final quiz
    function startFinalQuiz() {
        // Save current progress
        saveQuizProgress();
        // Redirect to the quiz page
        window.location.href = '/quiz';
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        // Get elements
        const moduleTabs = document.querySelectorAll('.module-tab');
        const modulePanels = document.querySelectorAll('.module-panel');
        const completedCount = document.getElementById('completed-count');
        const totalCount = document.getElementById('total-count');
        const percentage = document.getElementById('percentage');
        const progressValue = document.getElementById('progress-value');
        const lessonContentSection = document.getElementById('lesson-content-section');
        const lessonTitle = document.getElementById('lesson-title');
        const lessonContent = document.getElementById('lesson-content');
        const prevLessonBtn = document.getElementById('prev-lesson');
        const nextLessonBtn = document.getElementById('next-lesson');
        const prevLessonBottomBtn = document.getElementById('prev-lesson-bottom');
        const nextLessonBottomBtn = document.getElementById('next-lesson-bottom');
        const completeBtn = document.getElementById('complete-lesson');
        
        // Lesson templates
        const lessonTemplates = document.getElementById('lesson-templates');
        
        // Store completed lessons - load from localStorage if available
        let completedLessons = loadQuizProgress();
        let currentLesson = null;
        
        // Module and lesson data
        const modules = [
            {
                id: 'module1',
                title: 'Fundamentals of Cryptography',
                lessons: [
                    { id: 'lesson1-1', title: 'What is Cryptography?' },
                    { id: 'lesson1-2', title: 'Types of Cryptography' },
                    { id: 'lesson1-3', title: 'The Use of Cryptography in the Real World' }
                ]
            },
            {
                id: 'module2',
                title: 'Classical Ciphers',
                lessons: [
                    { id: 'lesson2-1', title: 'Caesar Cipher' },
                    { id: 'lesson2-2', title: 'Vigen√®re Cipher' },
                    { id: 'lesson2-3', title: 'Substitution Cipher' }
                ]
            },
            {
                id: 'module3',
                title: 'Modern Cryptography',
                lessons: [
                    { id: 'lesson3-1', title: 'Symmetric Encryption' },
                    { id: 'lesson3-2', title: 'Asymmetric Encryption' },
                    { id: 'lesson3-3', title: 'Hash Functions' }
                ]
            },
            {
                id: 'module4',
                title: 'Practical Applications',
                lessons: [
                    { id: 'lesson4-1', title: 'Secure Communications' },
                    { id: 'lesson4-2', title: 'Digital Signatures & PKI' },
                    { id: 'lesson4-3', title: 'Blockchain & Cryptocurrencies' }
                ]
            },
            {
                id: 'module5',
                title: 'Advanced Topics',
                lessons: [
                    { id: 'lesson5-1', title: 'Quantum Cryptography' },
                    { id: 'lesson5-2', title: 'Zero-Knowledge Proofs' },
                    { id: 'lesson5-3', title: 'Homomorphic Encryption' }
                ]
            }
        ];
        
        // Total number of lessons
        const totalLessons = modules.reduce((sum, module) => sum + module.lessons.length, 0);
        totalCount.textContent = totalLessons;
        
        // Handle module tab switching
        moduleTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                const moduleId = this.getAttribute('data-module');
                
                // Remove active class from all tabs and panels
                moduleTabs.forEach(t => t.classList.remove('active'));
                modulePanels.forEach(p => p.classList.remove('active'));
                
                // Add active class to selected tab and panel
                this.classList.add('active');
                document.getElementById(`${moduleId}-panel`).classList.add('active');
                
                // Smooth scroll to the module content
                document.getElementById(`${moduleId}-panel`).scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            });
        });
        
        // Show lesson content
        window.showLesson = function(lessonId) {
            // Find the lesson
            let lesson = null;
            let moduleId = '';
            let moduleIndex = 0;
            let lessonIndex = 0;
            
            for (let i = 0; i < modules.length; i++) {
                const module = modules[i];
                for (let j = 0; j < module.lessons.length; j++) {
                    if (module.lessons[j].id === lessonId) {
                        lesson = module.lessons[j];
                        moduleId = module.id;
                        moduleIndex = i;
                        lessonIndex = j;
                        break;
                    }
                }
                if (lesson) break;
            }
            
            if (!lesson) return;
            
            // Update current lesson
            currentLesson = {
                id: lessonId,
                moduleId: moduleId,
                moduleIndex: moduleIndex,
                lessonIndex: lessonIndex
            };
            
            // Set lesson title
            lessonTitle.textContent = lesson.title;
            
            // Get lesson content from template
            const template = document.getElementById(`${lessonId}-content`);
            if (template) {
                lessonContent.innerHTML = template.innerHTML;
            } else {
                lessonContent.innerHTML = '<p>Content for this lesson is not available yet.</p>';
            }
            
            // Update navigation buttons
            updateNavButtons();
            
            // Check if lesson is completed
            if (completedLessons.includes(lessonId)) {
                completeBtn.disabled = true;
                completeBtn.innerHTML = '<i class="fas fa-check-circle"></i> Completed';
            } else {
                completeBtn.disabled = false;
                completeBtn.innerHTML = '<i class="fas fa-check-circle"></i> Mark as Complete';
            }
            
            // Show lesson content section
            lessonContentSection.style.display = 'block';
            
            // Scroll to lesson content
            lessonContentSection.scrollIntoView({ behavior: 'smooth' });
        };
        
        // Update navigation buttons
        function updateNavButtons() {
            if (!currentLesson) return;
            
            const { moduleIndex, lessonIndex } = currentLesson;
            
            // Previous button
            if (moduleIndex === 0 && lessonIndex === 0) {
                // First lesson in first module
                prevLessonBtn.disabled = true;
                prevLessonBottomBtn.disabled = true;
            } else {
                prevLessonBtn.disabled = false;
                prevLessonBottomBtn.disabled = false;
            }
            
            // Next button
            if (moduleIndex === modules.length - 1 && lessonIndex === modules[moduleIndex].lessons.length - 1) {
                // Last lesson in last module
                nextLessonBtn.disabled = true;
                nextLessonBottomBtn.disabled = true;
            } else {
                nextLessonBtn.disabled = false;
                nextLessonBottomBtn.disabled = false;
            }
        }
        
        // Go to previous lesson function
        function goToPrevLesson() {
            if (!currentLesson || prevLessonBtn.disabled) return;
            
            const { moduleIndex, lessonIndex } = currentLesson;
            
            if (lessonIndex > 0) {
                // Previous lesson in same module
                showLesson(modules[moduleIndex].lessons[lessonIndex - 1].id);
            } else if (moduleIndex > 0) {
                // Last lesson in previous module
                const prevModule = modules[moduleIndex - 1];
                showLesson(prevModule.lessons[prevModule.lessons.length - 1].id);
            }
        }
        
        // Go to next lesson function
        function goToNextLesson() {
            if (!currentLesson || nextLessonBtn.disabled) return;
            
            const { moduleIndex, lessonIndex } = currentLesson;
            
            if (lessonIndex < modules[moduleIndex].lessons.length - 1) {
                // Next lesson in same module
                showLesson(modules[moduleIndex].lessons[lessonIndex + 1].id);
            } else if (moduleIndex < modules.length - 1) {
                // First lesson in next module
                showLesson(modules[moduleIndex + 1].lessons[0].id);
            }
        }
        
        // Attach navigation event listeners
        prevLessonBtn.addEventListener('click', goToPrevLesson);
        nextLessonBtn.addEventListener('click', goToNextLesson);
        prevLessonBottomBtn.addEventListener('click', goToPrevLesson);
        nextLessonBottomBtn.addEventListener('click', goToNextLesson);
        
        // Mark lesson as complete
        completeBtn.addEventListener('click', function() {
            if (!currentLesson) return;
            
            const lessonId = currentLesson.id;
            
            // Check if already completed
            if (completedLessons.includes(lessonId)) return;
            
            // Add to completed lessons
            completedLessons.push(lessonId);
            
            // Save progress to localStorage
            saveQuizProgress();
            
            // Update UI
            completeBtn.disabled = true;
            completeBtn.innerHTML = '<i class="fas fa-check-circle"></i> Completed';
            
            // Update lesson status icon
            const statusIcon = document.getElementById(`status-${lessonId}`);
            if (statusIcon) {
                statusIcon.classList.remove('far', 'fa-circle');
                statusIcon.classList.add('fas', 'fa-check-circle');
            }
            
            // Update progress
            updateProgress();
            
            // Auto-advance to next lesson if not the last one
            if (!nextLessonBtn.disabled) {
                setTimeout(goToNextLesson, 1000);
            }
        });
        
        // Check quiz answer
        window.checkAnswer = function(button, questionId) {
            const correctOption = button.getAttribute('data-correct');
            const selectedOption = document.querySelector(`input[name="quiz${questionId}"]:checked`);
            
            if (!selectedOption) {
                alert('Please select an answer.');
                return;
            }
            
            const isCorrect = selectedOption.value === correctOption;
            const feedbackDiv = button.previousElementSibling;
            
            // Show feedback
            feedbackDiv.style.display = 'block';
            
            if (isCorrect) {
                feedbackDiv.querySelector('.correct-feedback').style.display = 'block';
                feedbackDiv.querySelector('.incorrect-feedback').style.display = 'none';
            } else {
                feedbackDiv.querySelector('.correct-feedback').style.display = 'none';
                feedbackDiv.querySelector('.incorrect-feedback').style.display = 'block';
            }
            
            // Disable button
            button.disabled = true;
        };
        
        // Update progress
        function updateProgress() {
            const completed = completedLessons.length;
            const percentageValue = Math.round((completed / totalLessons) * 100);
            
            completedCount.textContent = completed;
            percentage.textContent = `${percentageValue}%`;
            progressValue.style.width = `${percentageValue}%`;
            
            // Update module percentages
            modules.forEach(module => {
                const moduleCompleted = module.lessons.filter(lesson => completedLessons.includes(lesson.id)).length;
                const modulePercentage = Math.round((moduleCompleted / module.lessons.length) * 100);
                
                // Update module percentage display if it exists
                const modulePercentageElement = document.getElementById(`${module.id}-percentage`);
                if (modulePercentageElement) {
                    modulePercentageElement.textContent = `${modulePercentage}%`;
                }
            });
            
            // Update final quiz status - always stays unlocked now
            if (quizProgressValue) {
                quizProgressValue.style.width = `100%`;
            }
        }
        
        // Update status icons for completed lessons
        function updateLessonStatusIcons() {
            completedLessons.forEach(lessonId => {
                const statusId = `status-${lessonId}`;
                const statusIcon = document.getElementById(statusId);
                if (statusIcon) {
                    statusIcon.classList.remove('far', 'fa-circle');
                    statusIcon.classList.add('fas', 'fa-check-circle');
                }
            });
        }
        
        // Add keyboard navigation for lesson content
        document.addEventListener('keydown', function(e) {
            if (lessonContentSection.style.display === 'block') {
                // Left arrow for previous lesson
                if (e.key === 'ArrowLeft' && !prevLessonBtn.disabled) {
                    goToPrevLesson();
                }
                // Right arrow for next lesson
                else if (e.key === 'ArrowRight' && !nextLessonBtn.disabled) {
                    goToNextLesson();
                }
            }
        });
        
        // Initialize
        updateProgress();
        updateLessonStatusIcons();
    });
</script>
