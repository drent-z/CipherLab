---
layout: layout.njk
title: CipherLab - Cryptography Educational Platform
---
<section class="hero" id="home">
    <div class="hero-content-wrapper">
        <div class="typing-container mb-4">
            <h1 class="glitch" data-text="Welcome to CipherLab">
                <span>Welcome to CipherLab</span>
                <span aria-hidden="true">Welcome to CipherLab</span>
                <span aria-hidden="true">Welcome to CipherLab</span>
            </h1>
        </div>
        
        <p class="mb-4 fade-in">Unlock the secrets of cryptography through interactive learning and challenges.</p>
        
        <div class="cta-buttons fade-in">
            <a href="/learn/" class="cta-button"><i class="fas fa-rocket"></i> Get Started</a>
        </div>
    </div>
    
    <!-- Animated binary code decoration -->
    <div class="binary-stream">01001100 01000101 01000001 01010010 01001110</div>
</section>

<section class="container section">
    <h2 class="section-title text-center mb-5 fade-in">Explore Cryptography</h2>
    
    <div class="features-grid">
        <div class="feature-box fade-in">
            <div class="feature-icon">
                <i class="fas fa-key"></i>
            </div>
            <h2>Classic Ciphers</h2>
            <p>Learn about fundamental encryption techniques such as the Caesar cipher, Vigen√®re cipher, and substitution ciphers that laid the groundwork for modern cryptography.</p>
            <a href="/learn/#module1" class="btn-learn-more">Learn More <i class="fas fa-arrow-right"></i></a>
        </div>
        
        <div class="feature-box fade-in">
            <div class="feature-icon">
                <i class="fas fa-shield-alt"></i>
            </div>
            <h2>Modern Encryption</h2>
            <p>Explore contemporary encryption algorithms like AES, RSA, and SHA that power today's secure communications, digital signatures, and blockchain technology.</p>
            <a href="/learn/#module2" class="btn-learn-more">Discover <i class="fas fa-arrow-right"></i></a>
        </div>
        
        <div class="feature-box fade-in">
            <div class="feature-icon">
                <i class="fas fa-unlock"></i>
            </div>
            <h2>Cryptanalysis</h2>
            <p>Try hands-on challenges to analyze and break different ciphers, enhancing your problem-solving skills and understanding of security vulnerabilities.</p>
            <a href="/learn/#module5" class="btn-learn-more">Challenge Yourself <i class="fas fa-arrow-right"></i></a>
        </div>
    </div>
</section>

<!-- Additional CSS for this page with fixed scrolling -->
<style>
    /* Core fixes for smooth scrolling */
    html {
        scroll-behavior: auto;
        height: 100%;
        overflow-y: scroll; /* Always show vertical scrollbar to prevent layout shifts */
    }
    
    body {
        height: 100%;
        overflow-x: hidden;
        position: relative;
        margin: 0;
        padding: 0;
    }
    
    /* Remove potentially problematic scroll properties */
    * {
        overflow-anchor: auto;
        overscroll-behavior: auto;
    }
    
    /* Hero section styling with simplified positioning */
    .hero {
        min-height: 85vh;
        padding: 3rem 1rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        position: relative;
        background-color: var(--dark);
    }
    
    /* Add the gradient as a pseudo-element instead of a nested div */
    .hero::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle at center, rgba(0, 255, 65, 0.1) 0%, transparent 70%);
        z-index: 0;
        pointer-events: none; /* Let scrolling events pass through */
    }
    
    /* Ensure hero content is above the gradient */
    .hero-content-wrapper {
        position: relative;
        z-index: 1;
        width: 100%;
        max-width: 800px;
    }
    
    /* Simplify the glitch effect */
    .glitch {
        font-size: 4rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: var(--primary);
        position: relative;
        text-shadow: 0 0 5px var(--primary);
        display: inline-block;
    }
    
    .glitch span:first-child {
        position: relative;
        z-index: 2;
    }
    
    .glitch span:not(:first-child) {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        pointer-events: none;
    }
    
    /* Optimize animations to use GPU acceleration but reduce their intensity */
    @keyframes glitch {
        0%, 100% { 
            transform: translate(0);
            opacity: 0.8;
        }
        20% {
            transform: translate(-2px, 2px);
            opacity: 0.9;
        }
        40% {
            transform: translate(2px, -2px);
            opacity: 0.8;
        }
        60% {
            transform: translate(-2px, -2px);
            opacity: 0.9;
        }
        80% {
            transform: translate(2px, 2px);
            opacity: 0.8;
        }
    }
    
    .glitch span:nth-child(2) {
        animation: glitch 3s infinite linear alternate-reverse;
        clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
        transform: translate(-0.05em, -0.0125em);
    }
    
    .glitch span:nth-child(3) {
        animation: glitch 2.7s infinite linear alternate-reverse;
        clip-path: polygon(0 60%, 100% 60%, 100% 100%, 0 100%);
        transform: translate(0.05em, 0.0125em);
    }
    
    /* Simplified CTA button with reduced animation intensity */
    .cta-button {
        display: inline-block;
        background: linear-gradient(45deg, var(--primary-dark), var(--primary));
        color: var(--dark);
        font-weight: 700;
        padding: 1rem 2rem;
        font-size: 1.2rem;
        text-decoration: none;
        border-radius: 4px;
        border: 1px solid var(--primary);
        position: relative;
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        z-index: 1;
    }
    
    .cta-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    
    /* Binary stream with simplified animation */
    .binary-stream {
        position: absolute;
        bottom: 20px;
        left: 0;
        width: 100%;
        text-align: center;
        color: var(--primary);
        opacity: 0.5;
        font-size: 1rem;
        pointer-events: none; /* Ensure it doesn't interfere with scrolling */
    }
    
    /* Features section with simplified layout */
    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        margin: 0 auto;
        max-width: 1200px;
    }
    
    .feature-box {
        background-color: var(--medium-dark);
        border: 1px solid var(--primary-dark);
        border-radius: 8px;
        padding: 2rem;
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    
    .feature-box:hover {
        transform: translateY(-10px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        border-color: var(--secondary);
    }
    
    .feature-icon {
        font-size: 3rem;
        margin-bottom: 1.5rem;
        color: var(--primary);
        transition: all 0.3s ease;
        width: 80px;
        height: 80px;
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1.5rem;
    }
    
    .feature-icon i {
        color: var(--dark);
    }
    
    .feature-box:hover .feature-icon {
        background: linear-gradient(135deg, var(--secondary), var(--primary));
    }
    
    .feature-box h2 {
        font-size: 1.8rem;
        margin-bottom: 1rem;
        color: var(--primary);
        transition: color 0.3s ease;
    }
    
    .feature-box:hover h2 {
        color: var(--secondary);
    }
    
    .feature-box p {
        color: var(--text-muted);
        flex-grow: 1;
        margin-bottom: 1.5rem;
    }
    
    .btn-learn-more {
        color: var(--primary);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: color 0.3s ease, transform 0.3s ease;
        font-weight: 500;
    }
    
    .btn-learn-more:hover {
        color: var(--secondary);
        transform: translateX(5px);
    }
    
    /* Fade-in animation with reduced intensity */
    .fade-in {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.6s ease, transform 0.6s ease;
    }
    
    .fade-in.visible {
        opacity: 1;
        transform: translateY(0);
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .glitch {
            font-size: 3rem;
        }
        
        .features-grid {
            grid-template-columns: 1fr;
        }
        
        .hero {
            min-height: 70vh;
        }
    }
    
    @media (max-width: 576px) {
        .glitch {
            font-size: 2.5rem;
        }
        
        .cta-button {
            padding: 0.8rem 1.5rem;
            font-size: 1rem;
        }
        
        .binary-stream {
            display: none; /* Hide on small screens to improve performance */
        }
    }
    
    /* Specific fixes for iOS scrolling */
    @supports (-webkit-overflow-scrolling: touch) {
        body, html {
            -webkit-overflow-scrolling: touch;
            height: 100%;
        }
        
        .hero, .section {
            -webkit-transform: translateZ(0);
        }
    }
</style>

<script>
    // Replace existing initialization script with optimized version
    document.addEventListener('DOMContentLoaded', function() {
        // Add visible class to fade-in elements
        document.querySelectorAll('.fade-in').forEach(element => {
            // Use IntersectionObserver for better performance when available
            if ('IntersectionObserver' in window) {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('visible');
                            observer.unobserve(entry.target);
                        }
                    });
                }, {
                    threshold: 0.1,
                    rootMargin: '0px 0px -50px 0px'
                });
                
                observer.observe(element);
            } else {
                // Fallback for browsers without IntersectionObserver
                element.classList.add('visible');
            }
        });
        
        // Ensure the body has loaded properly
        document.body.classList.add('loaded');
        
        // Animate binary stream
        const binaryStream = document.querySelector('.binary-stream');
        if (binaryStream) {
            let position = 100;
            const animate = () => {
                position -= 0.5;
                if (position < -100) position = 100;
                binaryStream.style.transform = `translateX(${position}%)`;
                requestAnimationFrame(animate);
            };
            requestAnimationFrame(animate);
        }
    });
</script>