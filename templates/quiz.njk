---
layout: layout.njk
title: Cryptography Quiz - CipherLab
---
<section class="hero" id="quiz-hero">
    <div class="hero-gradient-container"></div>
    <div class="row hero-row">
        <div class="col-12 text-center">
            <h1 class="page-heading">Cryptography Quiz</h1>
            <div class="hero-content">
                <p class="mb-4 fade-in hero-subtitle">Test your cryptography knowledge and earn a certificate</p>
            </div>
        </div>
    </div>
</section>

<section class="container section">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            {% include "learn/final-quiz.njk" %}
        </div>
    </div>
</section>

<!-- GUARANTEED FIX FOR QUIZ ISSUES -->
<script>
// Execute immediately
(function() {
    // Direct fix that runs right away
    console.log('EMERGENCY FIX RUNNING...');
    
    // Function to fix the start quiz button
    function fixStartButton() {
        console.log('Fixing start quiz button...');
        const startButton = document.getElementById('start-final-quiz-btn');
        
        if (!startButton) {
            console.warn('Start button not found, will try again');
            setTimeout(fixStartButton, 500);
            return;
        }
        
        console.log('Found start button, fixing...');
        
        // Remove all existing event listeners
        const newButton = startButton.cloneNode(true);
        startButton.parentNode.replaceChild(newButton, startButton);
        
        // Add a direct, simple click handler
        newButton.onclick = function(e) {
            console.log('START BUTTON CLICKED');
            e.preventDefault();
            
            // Direct quiz start functionality
            const intro = document.getElementById('final-quiz-intro');
            const questions = document.getElementById('final-quiz-questions');
            const submit = document.getElementById('submit-quiz');
            
            // Hide intro, show questions
            if (intro) intro.style.display = 'none';
            if (questions) questions.style.display = 'block';
            if (newButton) newButton.style.display = 'none';
            if (submit) submit.style.display = 'block';
            
            // Make sure quiz is started
            window.quizStarted = true;
            
            // Reset to first question
            if (typeof window.loadQuestion === 'function') {
                window.currentQuestion = 0;
                window.userAnswers = Array(window.quizData.length).fill(null);
                window.loadQuestion(0);
            } else {
                console.warn('loadQuestion function not found, using direct approach');
                // Direct approach to load first question
                const questionText = document.getElementById('question-text');
                const answerOptions = document.getElementById('answer-options');
                const currentQuestionEl = document.getElementById('current-question');
                
                if (questionText && window.quizData && window.quizData.length > 0) {
                    questionText.textContent = window.quizData[0].question;
                }
                if (currentQuestionEl) currentQuestionEl.textContent = '1';
            }
            
            // Force scroll to questions section
            if (questions) {
                questions.scrollIntoView({behavior: 'smooth'});
            }
        };
        
        console.log('Start button fixed successfully');
    }
    
    // Function to fix the secret 'o' pass trigger
    function fixSecretTrigger() {
        console.log('Fixing secret pass trigger...');
        const trigger = document.getElementById('secret-pass-trigger');
        
        if (!trigger) {
            console.warn('Secret trigger not found, will try again');
            setTimeout(fixSecretTrigger, 500);
            return;
        }
        
        console.log('Found secret trigger, fixing...');
        
        // Remove existing handlers
        const newTrigger = trigger.cloneNode(true);
        trigger.parentNode.replaceChild(newTrigger, trigger);
        
        // Click counter
        let clickCount = 0;
        
        // Super simple click handler
        newTrigger.onclick = function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            clickCount++;
            console.log('Secret trigger clicked', clickCount, 'times');
            
            // Visual feedback
            newTrigger.style.color = '#00FF41';
            setTimeout(() => newTrigger.style.color = '', 300);
            
            // Auto-pass on third click
            if (clickCount >= 3) {
                console.log('AUTO-PASS ACTIVATED');
                clickCount = 0;
                
                // Show success notification
                const popup = document.createElement('div');
                popup.textContent = 'âœ“ Quiz Auto-Passed!';
                popup.style.position = 'fixed';
                popup.style.top = '20px';
                popup.style.left = '50%';
                popup.style.transform = 'translateX(-50%)';
                popup.style.background = '#00FF41';
                popup.style.color = '#000';
                popup.style.padding = '10px 20px';
                popup.style.borderRadius = '5px';
                popup.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
                popup.style.zIndex = '9999';
                popup.style.fontWeight = 'bold';
                document.body.appendChild(popup);
                
                // Directly update quiz UI - most reliable approach
                setTimeout(function() {
                    try {
                        // Get sections
                        const intro = document.getElementById('final-quiz-intro');
                        const questions = document.getElementById('final-quiz-questions');
                        const results = document.getElementById('final-quiz-results');
                        const startBtn = document.getElementById('start-final-quiz-btn');
                        const submitBtn = document.getElementById('submit-quiz');
                        
                        // Hide/show correct sections
                        if (intro) intro.style.display = 'none';
                        if (questions) questions.style.display = 'none';
                        if (results) results.style.display = 'block';
                        if (startBtn) startBtn.style.display = 'none';
                        if (submitBtn) submitBtn.style.display = 'none';
                        
                        // Set perfect score
                        const finalScore = document.getElementById('final-score');
                        const scorePercentage = document.getElementById('score-percentage');
                        const certLevel = document.getElementById('cert-level');
                        const passMsg = document.getElementById('pass-message');
                        const failMsg = document.getElementById('fail-message');
                        
                        if (finalScore) finalScore.textContent = '30';
                        if (scorePercentage) scorePercentage.textContent = '100%';
                        if (certLevel) certLevel.textContent = 'Master Cryptographer';
                        if (passMsg) passMsg.style.display = 'block';
                        if (failMsg) failMsg.style.display = 'none';
                        
                        // Save to localStorage
                        try {
                            const quizStatus = {
                                completed: true,
                                passed: true,
                                score: 30,
                                percentage: 100,
                                completedDate: new Date().toISOString()
                            };
                            localStorage.setItem('cipherLabFinalQuizStatus', JSON.stringify(quizStatus));
                            
                            // Update progress tracking
                            const progressData = localStorage.getItem('cipherLabQuizProgress');
                            if (progressData) {
                                const progress = JSON.parse(progressData);
                                progress.finalQuizCompleted = true;
                                progress.finalQuizScore = 100;
                                localStorage.setItem('cipherLabQuizProgress', JSON.stringify(progress));
                            }
                        } catch (e) {
                            console.error('Error saving quiz status:', e);
                        }
                        
                        // Scroll to results
                        if (results) {
                            results.scrollIntoView({behavior: 'smooth'});
                        }
                        
                        console.log('AUTO-PASS COMPLETED SUCCESSFULLY');
                    } catch (err) {
                        console.error('Error during auto-pass:', err);
                    }
                }, 100);
                
                // Remove notification after 2 seconds
                setTimeout(() => {
                    if (document.body.contains(popup)) {
                        document.body.removeChild(popup);
                    }
                }, 2000);
            }
        };
        
        console.log('Secret trigger fixed successfully');
    }
    
    // Wait for DOM to be ready then apply fixes
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            fixStartButton();
            fixSecretTrigger();
        });
    } else {
        // DOM already ready, apply fixes now
        fixStartButton();
        fixSecretTrigger();
    }
    
    // Also apply fixes after a delay as a fallback
    setTimeout(function() {
        fixStartButton();
        fixSecretTrigger();
    }, 1000);
})();
</script>

<style>
    /* Page heading styling */
    .page-heading {
        color: var(--primary);
        font-size: 3rem;
        margin-bottom: 1.5rem;
        text-align: center;
        font-weight: 700;
        position: relative;
        display: inline-block;
    }
    
    /* Hero subtitle styling */
    .hero-subtitle {
        font-size: 1.5rem !important;
        line-height: 1.6 !important;
        color: var(--text) !important;
        margin-top: 1rem !important;
        margin-bottom: 1.5rem !important;
        max-width: 800px !important;
        margin-left: auto !important;
        margin-right: auto !important;
        text-align: center !important;
    }
    
    /* Hero content must be centered */
    .hero-content {
        margin-top: 1rem !important;
        position: relative !important;
        display: block !important;
        width: 100% !important;
        text-align: center !important;
    }
    
    /* Hero Styling */
    #quiz-hero {
        position: relative;
        min-height: 40vh; /* Shorter than main page hero */
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        padding: 3rem 0;
        width: 100%;
        max-width: 100%;
        pointer-events: auto;
        z-index: 1;
        margin-bottom: 2rem;
    }
    
    /* Force row to be full-width */
    #quiz-hero .hero-row {
        width: 100%;
        max-width: 100%;
        margin: 0 !important;
        padding: 0 1rem;
        overflow: visible;
    }
</style>
