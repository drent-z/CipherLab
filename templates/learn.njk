---
layout: layout.njk
title: Learn Cryptography - CipherLab
---
<div class="hero" id="learn-hero">
    <div class="hero-gradient-container"></div>
    <div class="row hero-row">
        <div class="col-12 text-center">
            <h1 class="glitch" data-text="Learn Cryptography">
                <span>Learn Cryptography</span>
                <span aria-hidden="true">Learn Cryptography</span>
                <span aria-hidden="true">Learn Cryptography</span>
            </h1>
            <p class="mb-4 fade-in hero-subtitle">Master the art and science of cryptography through interactive modules and hands-on exercises</p>
        </div>
    </div>
    
    <!-- Animated binary code decoration -->
    <div class="binary-stream">01001100 01000101 01000001 01010010 01001110</div>
</div>

<section class="container section">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="learning-path-card fade-in">
                <div class="card-header">
                    <h2 class="mb-0"><i class="fas fa-graduation-cap"></i> Your Learning Journey</h2>
                </div>
                <div class="card-body">
                    <div class="progress-tracker mb-4">
                        <div class="progress-stats">
                            <span>Progress: <span id="completed-count">0</span>/<span id="total-count">15</span> lessons</span>
                            <span id="percentage">0%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-value" id="progress-value" style="width: 0%;"></div>
                        </div>
                    </div>
                    
                    <div class="learning-path">
                        <!-- Include the module files -->
                        {% include "learn/module1.njk" %}
                        {% include "learn/module2.njk" %}
                        {% include "learn/module3.njk" %}
                        {% include "learn/module4.njk" %}
                        {% include "learn/module5.njk" %}
                        
                        <!-- Final Quiz Section -->
                        {% include "learn/final-quiz.njk" %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<section class="container section" id="lesson-content-section" style="display: none;">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="lesson-card fade-in">
                <div class="card-header">
                    <div class="lesson-nav">
                        <button id="prev-lesson" class="nav-button"><i class="fas fa-chevron-left"></i> Previous</button>
                        <h2 id="lesson-title" class="mb-0"></h2>
                        <button id="next-lesson" class="nav-button">Next <i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="lesson-content">
                        <!-- Lesson content will be loaded here -->
                    </div>
                    
                    <div class="lesson-complete-section">
                        <button id="complete-lesson" class="complete-button">
                            <i class="fas fa-check-circle"></i> Mark as Complete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Lesson Content Templates -->
<div id="lesson-templates" style="display: none;">
    <!-- Include the lesson content templates -->
    {% include "learn/lesson-templates.njk" %}
</div>

<!-- CSS Styles -->
<style>
    /* Hero Section */
    #learn-hero {
        min-height: 40vh; /* Shorter than main page hero */
        background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), 
                    url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><text x="50%" y="50%" font-family="monospace" font-size="10" fill="rgba(0, 255, 65, 0.1)" text-anchor="middle" dominant-baseline="middle">01001001</text></svg>');
        background-size: 100px 100px;
    }
    
    /* Progress Tracker */
    .progress-tracker {
        margin-bottom: 2rem;
    }
    
    .progress-stats {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        color: var(--text-muted);
    }
    
    .progress-bar {
        height: 8px;
        background-color: var(--darker);
        border-radius: 4px;
        overflow: hidden;
    }
    
    .progress-value {
        height: 100%;
        background: linear-gradient(90deg, var(--primary-dark), var(--primary));
        transition: width 0.5s ease;
    }
    
    /* Module Styling */
    .learning-module {
        background-color: var(--medium-dark);
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 1.5rem;
        border: 1px solid var(--primary-dark);
        transition: all 0.3s ease;
    }
    
    .learning-module:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    
    .module-header {
        display: flex;
        align-items: center;
        padding: 1.5rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    
    .module-header:hover {
        background-color: var(--light-dark);
    }
    
    .module-icon {
        width: 50px;
        height: 50px;
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1.5rem;
        font-size: 1.5rem;
        color: var(--dark);
        flex-shrink: 0;
    }
    
    .module-title {
        flex-grow: 1;
    }
    
    .module-title h3 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }
    
    .module-title p {
        color: var(--text-muted);
        margin: 0.5rem 0 0 0;
    }
    
    .module-progress {
        display: flex;
        align-items: center;
        flex-shrink: 0;
    }
    
    .module-percentage {
        margin-right: 1rem;
        font-weight: 600;
        color: var(--primary);
    }
    
    .module-content {
        display: none;
        padding: 0 1.5rem 1.5rem;
        border-top: 1px solid var(--primary-dark);
    }
    
    .lessons-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }
    
    .lesson-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background-color: var(--darker);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .lesson-item:hover {
        background-color: var(--light-dark);
        transform: translateX(5px);
    }
    
    .lesson-status i {
        color: var(--text-muted);
        font-size: 1.25rem;
        transition: all 0.3s ease;
    }
    
    .lesson-status i.fa-check-circle {
        color: var(--primary);
    }
    
    /* Lesson Content Styling */
    .lesson-card {
        background-color: var(--medium-dark);
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 3rem;
        border: 1px solid var(--primary-dark);
    }
    
    .lesson-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
    }
    
    .nav-button {
        background-color: var(--darker);
        color: var(--text);
        border: 1px solid var(--primary-dark);
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .nav-button:hover {
        background-color: var(--light-dark);
        color: var(--primary);
    }
    
    .nav-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .lesson-complete-section {
        display: flex;
        justify-content: center;
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid var(--primary-dark);
    }
    
    .complete-button {
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        color: var(--dark);
        border: none;
        padding: 1rem 2rem;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        transition: all 0.3s ease;
    }
    
    .complete-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    
    .complete-button:disabled {
        background: linear-gradient(135deg, var(--text-muted), var(--light-dark));
        cursor: not-allowed;
    }
    
    .complete-button i {
        font-size: 1.25rem;
    }
    
    /* Media Queries */
    @media (max-width: 992px) {
        .two-column {
            flex-direction: column;
            gap: 1.5rem;
        }
        
        .final-quiz-header {
            flex-direction: column;
            text-align: center;
        }
        
        .final-quiz-footer {
            flex-direction: column;
            align-items: stretch;
        }
    }
    
    @media (max-width: 768px) {
        .grid-container,
        .industry-grid,
        .trends-container,
        .application-grid,
        .attributes-container,
        .result-details {
            grid-template-columns: 1fr;
        }
        
        .historical-info {
            flex-direction: column;
            align-items: center;
            text-align: center;
        }
        
        .alphabet-visualization {
            overflow-x: scroll;
        }
        
        .certificate {
            padding: 1.5rem;
        }
        
        .certificate-footer {
            flex-direction: column;
            align-items: center;
            gap: 2rem;
        }
        
        .quiz-actions {
            flex-direction: column;
        }
    }
    
@media (max-width: 576px) {
        .application-list {
            grid-template-columns: 1fr;
        }
        
        .app-items {
            grid-template-columns: 1fr;
        }
        
        .implementation-grid {
            grid-template-columns: 1fr;
        }
        
        .quiz-progress-indicator {
            flex-direction: column;
            gap: 1rem;
            align-items: flex-start;
        }
        
        .certificate-actions {
            flex-direction: column;
        }
    }
    
    /* Binary stream decoration */
    .binary-stream {
        position: absolute;
        bottom: 20px;
        left: 0;
        width: 100%;
        font-family: 'IBM Plex Mono', monospace;
        color: var(--primary);
        opacity: 0.7;
        font-size: 1.2rem;
        text-align: center;
        letter-spacing: 5px;
        animation: float 3s ease-in-out infinite;
    }
    
    @keyframes float {
        0% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
        100% { transform: translateY(0); }
    }
    
    /* Enhanced Lesson Card */
    .lesson-card {
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .lesson-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
    }
    
    /* Enhanced Complete Button */
    .complete-button {
        position: relative;
        overflow: hidden;
    }
    
    .complete-button::after {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(
            to right,
            rgba(255, 255, 255, 0) 0%,
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0) 100%
        );
        transform: rotate(45deg);
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .complete-button:hover::after {
        opacity: 1;
        animation: shine 1.5s ease;
    }
    
    @keyframes shine {
        0% { left: -50%; opacity: 0; }
        50% { opacity: 0.5; }
        100% { left: 150%; opacity: 0; }
    }
    
    /* Final Quiz Section Styling */
    .final-quiz-container {
        margin-top: 3rem;
    }
    
    .final-quiz-card {
        background-color: var(--medium-dark);
        border-radius: 8px;
        border: 1px solid var(--primary-dark);
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease;
    }
    
    .final-quiz-card:hover {
        transform: translateY(-5px);
    }
    
    .final-quiz-header {
        background-color: var(--darker);
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1.5rem;
        border-bottom: 1px solid var(--primary-dark);
    }
    
    .quiz-icon {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.8rem;
        color: var(--dark);
    }
    
    .quiz-info {
        flex-grow: 1;
    }
    
    .quiz-info h3 {
        margin: 0 0 0.5rem 0;
        font-size: 1.5rem;
    }
    
    .quiz-info p {
        margin: 0;
        color: var(--text-muted);
    }
    
    .quiz-status {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
    }
    
    .final-quiz-footer {
        padding: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .requirements {
        flex-grow: 1;
    }
    
    .requirements p {
        margin: 0 0 0.5rem 0;
        color: var(--text-muted);
    }
    
    .quiz-progress {
        height: 6px;
        background-color: var(--darker);
        border-radius: 3px;
        overflow: hidden;
        width: 200px;
    }
    
    .final-quiz-button {
        background: linear-gradient(135deg, var(--secondary), var(--primary));
        color: var(--dark);
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
    }
    
    .final-quiz-button:hover:not([disabled]) {
        transform: translateY(-3px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    
    .final-quiz-button:disabled {
        background: linear-gradient(135deg, var(--darker), var(--medium-dark));
        color: var(--text-muted);
        cursor: not-allowed;
    }
    
    /* Grid Layout Fixes */
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        grid-gap: 1.5rem;
        margin: 2rem 0;
    }
    
    .industry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        grid-gap: 1.5rem;
        margin: 2rem 0;
    }
    
    .application-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        grid-gap: 1.5rem;
    }
    
    .implementation-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        grid-gap: 1.5rem;
    }
    
    .trends-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        grid-gap: 1.5rem;
    }
    
    /* Interactive Elements Styling */
    .interactive-cipher-demo {
        background-color: var(--darker);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        border: 1px solid var(--primary-dark);
    }
    
    .demo-form {
        margin-bottom: 1.5rem;
    }
    
    .cipher-input {
        width: 100%;
        padding: 0.75rem;
        background-color: var(--dark);
        border: 1px solid var(--primary-dark);
        color: var(--text);
        font-family: 'IBM Plex Mono', monospace;
        border-radius: 4px;
    }
    
    .shift-control {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .slider {
        flex-grow: 1;
        -webkit-appearance: none;
        height: 8px;
        background: var(--dark);
        border-radius: 4px;
        outline: none;
    }
    
    .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--primary);
        cursor: pointer;
    }
    
    .slider::-moz-range-thumb {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--primary);
        cursor: pointer;
    }
    
    .cipher-output {
        padding: 0.75rem;
        background-color: var(--dark);
        border: 1px solid var(--primary-dark);
        color: var(--primary);
        font-family: 'IBM Plex Mono', monospace;
        font-weight: 600;
        letter-spacing: 1px;
        border-radius: 4px;
    }
    
    .alphabet-visualization {
        background-color: var(--dark);
        border-radius: 4px;
        padding: 1rem;
        overflow-x: auto;
    }
    
    .alphabet-row {
        display: flex;
        margin-bottom: 1rem;
    }
    
    .alphabet-row.shifted {
        position: relative;
    }
    
    .alphabet-row.shifted::before {
        content: '';
        position: absolute;
        top: -10px;
        left: 0;
        width: 100%;
        height: 1px;
        background-color: var(--primary-dark);
        opacity: 0.5;
    }
    
    .alphabet-letter {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 30px;
        height: 30px;
        border-radius: 4px;
        margin-right: 5px;
        background-color: var(--medium-dark);
        font-family: 'IBM Plex Mono', monospace;
    }
    
    /* Additional animations and effects */
    .animate-glow {
        animation: glow-pulse 3s infinite alternate;
    }
    
    @keyframes glow-pulse {
        0% {
            box-shadow: 0 0 5px rgba(0, 255, 65, 0.1);
        }
        100% {
            box-shadow: 0 0 20px rgba(0, 255, 65, 0.3);
        }
    }
    
    .animate-fade-in {
        opacity: 0;
        animation: fadeIn 1s forwards;
    }
    
    @keyframes fadeIn {
        0% {
            opacity: 0;
            transform: translateY(20px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .key-concept {
        position: relative;
        padding: 1.5rem;
        background-color: var(--darker);
        border-left: 4px solid var(--primary);
        border-radius: 4px;
    }
    
    .key-concept h4 {
        color: var(--primary);
        margin-top: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .key-concept p {
        margin-bottom: 0;
    }
    
    .timeline-item {
        position: relative;
        padding-left: 2rem;
        padding-bottom: 2rem;
        border-left: 2px solid var(--primary-dark);
    }
    
    .timeline-item:last-child {
        border-left: none;
    }
    
    .timeline-marker {
        position: absolute;
        left: -10px;
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        color: var(--dark);
        padding: 0.3rem 0.8rem;
        border-radius: 4px;
        font-size: 0.9rem;
        font-weight: 600;
    }
    
    .timeline-content {
        padding: 1rem 0 0 1.5rem;
    }
    
    .timeline-content h4 {
        margin-top: 0;
        color: var(--primary);
    }
</style>

<!-- JavaScript for Interactive Functionality -->
<script>
    // Store quiz data in localStorage to maintain state between pages
    function saveQuizProgress() {
        const progress = {
            completedLessons: completedLessons,
            totalLessons: totalLessons
        };
        localStorage.setItem('cipherLabQuizProgress', JSON.stringify(progress));
    }
    
    // Load quiz progress from localStorage
    function loadQuizProgress() {
        const progressData = localStorage.getItem('cipherLabQuizProgress');
        if (progressData) {
            const progress = JSON.parse(progressData);
            return progress.completedLessons || [];
        }
        return [];
    }
    
    // Initialize the final quiz
    function startFinalQuiz() {
        // Save current progress
        saveQuizProgress();
        // Redirect to the quiz page
        window.location.href = '/quiz';
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        // Get elements
        const moduleContents = document.querySelectorAll('.module-content');
        const completedCount = document.getElementById('completed-count');
        const totalCount = document.getElementById('total-count');
        const percentage = document.getElementById('percentage');
        const progressValue = document.getElementById('progress-value');
        const lessonContentSection = document.getElementById('lesson-content-section');
        const lessonTitle = document.getElementById('lesson-title');
        const lessonContent = document.getElementById('lesson-content');
        const prevLessonBtn = document.getElementById('prev-lesson');
        const nextLessonBtn = document.getElementById('next-lesson');
        const completeBtn = document.getElementById('complete-lesson');
        const quizStatusText = document.getElementById('quiz-status-text');
        const quizLockIcon = document.getElementById('quiz-lock-icon');
        const quizProgressValue = document.getElementById('quiz-progress-value');
        const startFinalQuizBtn = document.getElementById('start-final-quiz');
        
        // Lesson templates
        const lessonTemplates = document.getElementById('lesson-templates');
        
        // Store completed lessons - load from localStorage if available
        let completedLessons = loadQuizProgress();
        let currentLesson = null;
        
        // Module and lesson data
        const modules = [
            {
                id: 'module1',
                title: 'Fundamentals of Cryptography',
                lessons: [
                    { id: 'lesson1-1', title: 'What is Cryptography?' },
                    { id: 'lesson1-2', title: 'Types of Cryptography' },
                    { id: 'lesson1-3', title: 'The Use of Cryptography in the Real World' }
                ]
            },
            {
                id: 'module2',
                title: 'Classical Ciphers',
                lessons: [
                    { id: 'lesson2-1', title: 'Caesar Cipher' },
                    { id: 'lesson2-2', title: 'Vigenère Cipher' },
                    { id: 'lesson2-3', title: 'Substitution Cipher' }
                ]
            },
            {
                id: 'module3',
                title: 'Modern Cryptography',
                lessons: [
                    { id: 'lesson3-1', title: 'Symmetric Encryption' },
                    { id: 'lesson3-2', title: 'Asymmetric Encryption' },
                    { id: 'lesson3-3', title: 'Hash Functions' }
                ]
            },
            {
                id: 'module4',
                title: 'Practical Applications',
                lessons: [
                    { id: 'lesson4-1', title: 'Secure Communications' },
                    { id: 'lesson4-2', title: 'Digital Signatures & PKI' },
                    { id: 'lesson4-3', title: 'Blockchain & Cryptocurrencies' }
                ]
            },
            {
                id: 'module5',
                title: 'Advanced Topics',
                lessons: [
                    { id: 'lesson5-1', title: 'Quantum Cryptography' },
                    { id: 'lesson5-2', title: 'Zero-Knowledge Proofs' },
                    { id: 'lesson5-3', title: 'Homomorphic Encryption' }
                ]
            }
        ];
        
        // Total number of lessons
        const totalLessons = modules.reduce((sum, module) => sum + module.lessons.length, 0);
        totalCount.textContent = totalLessons;
        
        // Toggle module content visibility
        window.toggleModule = function(moduleContentId) {
            const moduleContent = document.getElementById(moduleContentId);
            
            if (moduleContent.style.display === 'block') {
                moduleContent.style.display = 'none';
            } else {
                // Hide all other module contents
                moduleContents.forEach(content => {
                    content.style.display = 'none';
                });
                
                // Show the selected module content
                moduleContent.style.display = 'block';
            }
        };
        
        // Show lesson content
        window.showLesson = function(lessonId) {
            // Find the lesson
            let lesson = null;
            let moduleId = '';
            let moduleIndex = 0;
            let lessonIndex = 0;
            
            for (let i = 0; i < modules.length; i++) {
                const module = modules[i];
                for (let j = 0; j < module.lessons.length; j++) {
                    if (module.lessons[j].id === lessonId) {
                        lesson = module.lessons[j];
                        moduleId = module.id;
                        moduleIndex = i;
                        lessonIndex = j;
                        break;
                    }
                }
                if (lesson) break;
            }
            
            if (!lesson) return;
            
            // Update current lesson
            currentLesson = {
                id: lessonId,
                moduleId: moduleId,
                moduleIndex: moduleIndex,
                lessonIndex: lessonIndex
            };
            
            // Set lesson title
            lessonTitle.textContent = lesson.title;
            
            // Get lesson content from template
            const template = document.getElementById(`${lessonId}-content`);
            if (template) {
                lessonContent.innerHTML = template.innerHTML;
            } else {
                lessonContent.innerHTML = '<p>Content for this lesson is not available yet.</p>';
            }
            
            // Update navigation buttons
            updateNavButtons();
            
            // Check if lesson is completed
            if (completedLessons.includes(lessonId)) {
                completeBtn.disabled = true;
                completeBtn.innerHTML = '<i class="fas fa-check-circle"></i> Completed';
            } else {
                completeBtn.disabled = false;
                completeBtn.innerHTML = '<i class="fas fa-check-circle"></i> Mark as Complete';
            }
            
            // Show lesson content section
            lessonContentSection.style.display = 'block';
            
            // Scroll to lesson content
            lessonContentSection.scrollIntoView({ behavior: 'smooth' });
        };
        
        // Update navigation buttons
        function updateNavButtons() {
            if (!currentLesson) return;
            
            const { moduleIndex, lessonIndex } = currentLesson;
            
            // Previous button
            if (moduleIndex === 0 && lessonIndex === 0) {
                // First lesson in first module
                prevLessonBtn.disabled = true;
            } else {
                prevLessonBtn.disabled = false;
            }
            
            // Next button
            if (moduleIndex === modules.length - 1 && lessonIndex === modules[moduleIndex].lessons.length - 1) {
                // Last lesson in last module
                nextLessonBtn.disabled = true;
            } else {
                nextLessonBtn.disabled = false;
            }
        }
        
        // Go to previous lesson
        prevLessonBtn.addEventListener('click', function() {
            if (!currentLesson) return;
            
            const { moduleIndex, lessonIndex } = currentLesson;
            
            if (lessonIndex > 0) {
                // Previous lesson in same module
                showLesson(modules[moduleIndex].lessons[lessonIndex - 1].id);
            } else if (moduleIndex > 0) {
                // Last lesson in previous module
                const prevModule = modules[moduleIndex - 1];
                showLesson(prevModule.lessons[prevModule.lessons.length - 1].id);
            }
        });
        
        // Go to next lesson
        nextLessonBtn.addEventListener('click', function() {
            if (!currentLesson) return;
            
            const { moduleIndex, lessonIndex } = currentLesson;
            
            if (lessonIndex < modules[moduleIndex].lessons.length - 1) {
                // Next lesson in same module
                showLesson(modules[moduleIndex].lessons[lessonIndex + 1].id);
            } else if (moduleIndex < modules.length - 1) {
                // First lesson in next module
                showLesson(modules[moduleIndex + 1].lessons[0].id);
            }
        });
        
        // Mark lesson as complete
        completeBtn.addEventListener('click', function() {
            if (!currentLesson) return;
            
            const lessonId = currentLesson.id;
            
            // Check if already completed
            if (completedLessons.includes(lessonId)) return;
            
            // Add to completed lessons
            completedLessons.push(lessonId);
            
            // Save progress to localStorage
            saveQuizProgress();
            
            // Update UI
            completeBtn.disabled = true;
            completeBtn.innerHTML = '<i class="fas fa-check-circle"></i> Completed';
            
            // Update lesson status icon
            const statusIcon = document.getElementById(`status-${lessonId.split('-')[1]}`);
            if (statusIcon) {
                statusIcon.classList.remove('far', 'fa-circle');
                statusIcon.classList.add('fas', 'fa-check-circle');
            }
            
            // Update progress
            updateProgress();
        });
        
        // Check quiz answer
        window.checkAnswer = function(button, questionId) {
            const correctOption = button.getAttribute('data-correct');
            const selectedOption = document.querySelector(`input[name="quiz${questionId}"]:checked`);
            
            if (!selectedOption) {
                alert('Please select an answer.');
                return;
            }
            
            const isCorrect = selectedOption.value === correctOption;
            const feedbackDiv = button.previousElementSibling;
            
            // Show feedback
            feedbackDiv.style.display = 'block';
            
            if (isCorrect) {
                feedbackDiv.querySelector('.correct-feedback').style.display = 'block';
                feedbackDiv.querySelector('.incorrect-feedback').style.display = 'none';
            } else {
                feedbackDiv.querySelector('.correct-feedback').style.display = 'none';
                feedbackDiv.querySelector('.incorrect-feedback').style.display = 'block';
            }
            
            // Disable button
            button.disabled = true;
        };
        
        // Update progress
        function updateProgress() {
            const completed = completedLessons.length;
            const percentageValue = Math.round((completed / totalLessons) * 100);
            
            completedCount.textContent = completed;
            percentage.textContent = `${percentageValue}%`;
            progressValue.style.width = `${percentageValue}%`;
            
            // Update module percentages
            modules.forEach(module => {
                const moduleCompleted = module.lessons.filter(lesson => completedLessons.includes(lesson.id)).length;
                const modulePercentage = Math.round((moduleCompleted / module.lessons.length) * 100);
                
                document.getElementById(`${module.id}-percentage`).textContent = `${modulePercentage}%`;
            });
            
            // Update final quiz status
            quizProgressValue.style.width = `${percentageValue}%`;
            
            if (percentageValue === 100) {
                quizStatusText.textContent = 'Unlocked';
                quizLockIcon.classList.remove('fa-lock');
                quizLockIcon.classList.add('fa-unlock');
                quizLockIcon.style.color = 'var(--primary)';
                startFinalQuizBtn.disabled = false;
                
                // Show a congratulatory message
                alert('Congratulations! You\'ve completed all lessons and unlocked the Final Certification Quiz.');
            }
        }
        
        // Initialize
        updateProgress();
    });
</script>