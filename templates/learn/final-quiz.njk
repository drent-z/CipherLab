<!-- Final Quiz Section with Improved Styling -->
<div class="final-quiz-container" id="final-quiz-section">
    <div class="final-quiz-card">
        <div class="final-quiz-header">
            <div class="quiz-icon">
                <i class="fas fa-trophy"></i>
            </div>
            <div class="quiz-info">
                <h3>Final Certification Quiz</h3>
                <p>Test your knowledge and earn your cryptography certification</p>
            </div>
            <div class="quiz-status">
                <span id="quiz-status-text">Unlocked</span>
                <i class="fas fa-unlock" id="quiz-lock-icon" style="color: var(--primary);"></i>
            </div>
        </div>
        <div class="final-quiz-content">
            <div id="final-quiz-intro" style="display: block;">
                <p>Ready to test your knowledge of cryptography? This comprehensive quiz covers all the topics from our lessons:</p>
                <ul>
                    <li>Fundamentals of Cryptography</li>
                    <li>Classical Ciphers</li>
                    <li>Modern Cryptography</li>
                    <li>Applications</li>
                    <li>Advanced Topics</li>
                </ul>
                <p>The quiz consists of 30 questions with 6 questions from each module. You need to score at least 70% to pass and earn your certification. Higher scores unlock premium certificate levels!</p>
                <p>Good luck!</p>
            </div>
            
            <div id="final-quiz-questions" style="display: none;">
                <!-- Questions will be loaded dynamically -->
                <div class="question-container">
                    <h4 id="question-text">Question text will appear here</h4>
                    <div class="answer-options" id="answer-options">
                        <!-- Options will be generated dynamically -->
                    </div>
                    <div class="quiz-navigation">
                        <button id="prev-question" class="nav-button"><i class="fas fa-chevron-left"></i> Previous</button>
                        <div class="question-progress">
                            <span id="current-question">1</span>/<span id="total-questions">10</span>
                        </div>
                        <button id="next-question" class="nav-button">Next <i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
            </div>
            
            <div id="final-quiz-results" style="display: none;">
                <div class="results-header">
                    <h3>Quiz Results</h3>
                </div>
                <div class="score-display">
                    <div class="score-circle">
                        <span id="final-score">0</span>/<span id="max-score">30</span>
                    </div>
                    <div class="score-percentage">
                        <span id="score-percentage">0%</span>
                    </div>
                </div>
                <div class="results-message" id="pass-message" style="display: none;">
                    <i class="fas fa-check-circle"></i>
                    <h4>Congratulations!</h4>
                    <p>You've successfully completed the Cryptography Certification Quiz. You now have a solid understanding of cryptographic principles and applications across all modules!</p>
                    <div class="certificate-level">
                        <span id="cert-level">Master Cryptographer</span>
                    </div>
                    
                    <div class="certificate-form">
                        <p>Enter your name to generate your personalized certificate:</p>
                        <div class="name-input-container">
                            <input type="text" id="certificate-name" placeholder="Enter your full name" class="name-input">
                            <button id="generate-certificate" class="fancy-generate-button" title="Generate your personalized certificate">
                                <span class="button-icon"><i class="fas fa-certificate"></i></span>
                                <span class="button-text">Generate Certificate</span>
                            </button>
                        </div>
                        <p class="form-help-text" style="font-size: 0.8rem; margin-top: 0.5rem; color: var(--text-muted);">
                            <i class="fas fa-info-circle"></i> Your name will appear exactly as entered on the certificate
                        </p>
                    </div>
                    
                    <div class="certificate-link" style="display: none;">
                        <p class="success-message"><i class="fas fa-check-circle"></i> Your certificate has been generated successfully!</p>
                        <a href="#" id="certificate-download">Download Certificate</a>
                        <p class="file-info" style="font-size: 0.8rem; margin-top: 0.5rem; color: var(--text-muted);">
                            <i class="fas fa-file-pdf"></i> PDF file will be saved to your downloads folder
                        </p>
                    </div>
                </div>
                <div class="results-message" id="fail-message" style="display: none;">
                    <i class="fas fa-times-circle"></i>
                    <h4>Keep Learning</h4>
                    <p>You didn't quite reach the passing score of 70%. Review the modules and try again to strengthen your understanding of cryptography.</p>
                </div>
                <div class="action-buttons">
                    <button id="review-questions" class="review-button"><i class="fas fa-search"></i> Review Answers</button>
                    <button id="retake-quiz" class="retake-button"><i class="fas fa-redo"></i> Retake Quiz</button>
                </div>
            </div>
            
            <div id="question-review" style="display: none;">
                <div class="review-header">
                    <h3>Question Review</h3>
                </div>
                <div id="review-content">
                    <!-- Will be populated dynamically -->
                </div>
                <button id="back-to-results" class="back-button"><i class="fas fa-arrow-left"></i> Back to Results</button>
            </div>
        </div>
        <div class="final-quiz-footer">
            <div class="requirements">
                <p><i class="fas fa-info-circle"></i> Take the quiz anytime to test your knowledge</p>
                <div class="quiz-progress">
                    <div class="quiz-progress-value" id="quiz-progress-value" style="width: 100%;"></div>
                </div>
            </div>
            <button id="start-final-quiz-btn" class="cta-button final-quiz-button">
                <i class="fas fa-play"></i> Start Final Quiz
            </button>
            <button id="submit-quiz" class="cta-button final-quiz-button" style="display: none;">
                <i class="fas fa-check"></i> Submit Answers
            </button>
        </div>
    </div>
</div>

<!-- Include jsPDF library and html2canvas for improved certificate generation -->
<script>
// Add preload links for better script loading performance
document.addEventListener('DOMContentLoaded', function() {
    // Create preload link elements
    const preloadLinks = [
        { rel: 'preload', href: 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js', as: 'script' },
        { rel: 'preload', href: 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js', as: 'script' }
    ];
    
    // Add preload links to document head
    preloadLinks.forEach(link => {
        const linkElement = document.createElement('link');
        linkElement.rel = link.rel;
        linkElement.href = link.href;
        linkElement.as = link.as;
        document.head.appendChild(linkElement);
    });
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script>
// Ensure jsPDF and other libraries load properly with better error handling
window.addEventListener('DOMContentLoaded', function() {
    // Check for jsPDF library
    if (typeof window.jspdf === 'undefined') {
        console.warn('Primary jsPDF load failed, loading alternative source...');
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/jspdf@2.5.1/dist/jspdf.umd.min.js';
        script.onload = function() {
            console.log('Alternative jsPDF library loaded successfully');
        };
        script.onerror = function() {
            console.error('Failed to load alternative jsPDF library');
            document.getElementById('generate-certificate').setAttribute('data-error', 'true');
            document.getElementById('generate-certificate').title = "PDF library not available";
        };
        document.head.appendChild(script);
    } else {
        console.log('jsPDF library loaded successfully');
    }
    
    // Check for html2canvas library
    if (typeof window.html2canvas === 'undefined') {
        console.warn('html2canvas not loaded, loading alternative source...');
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/html2canvas@1.4.1/dist/html2canvas.min.js';
        script.onload = function() {
            console.log('Alternative html2canvas library loaded successfully');
        };
        script.onerror = function() {
            console.error('Failed to load alternative html2canvas library');
        };
        document.head.appendChild(script);
    }
});
</script>

<script>
// Add certificate generation functionality
const quizData = [
    // Module 1: Fundamentals of Cryptography
    {
        module: "Fundamentals",
        question: "What is the main purpose of cryptography?",
        options: [
            "To create computer games",
            "To secure information",
            "To speed up computer processing",
            "To develop new programming languages"
        ],
        correctAnswer: 1
    },
    {
        module: "Fundamentals",
        question: "Which of these is NOT a main goal of cryptography?",
        options: [
            "Confidentiality",
            "Integrity",
            "Authentication",
            "Compression"
        ],
        correctAnswer: 3
    },
    {
        module: "Fundamentals",
        question: "What does the term 'non-repudiation' mean in cryptography?",
        options: [
            "The ability to deny sending a message",
            "The inability to deny sending a message",
            "The ability to decrypt any message",
            "The ability to encrypt any message without a key"
        ],
        correctAnswer: 1
    },
    {
        module: "Fundamentals",
        question: "In what ancient civilization was the scytale, one of the first cryptographic devices, used?",
        options: [
            "Ancient Egypt",
            "Roman Empire",
            "Ancient Sparta",
            "Mesopotamia"
        ],
        correctAnswer: 2
    },
    {
        module: "Fundamentals",
        question: "Which of these best describes plaintext?",
        options: [
            "Text that is formatted in a simple way",
            "Text that has been encrypted",
            "The original, unencrypted message",
            "Text that can only be read by authorized users"
        ],
        correctAnswer: 2
    },
    {
        module: "Fundamentals",
        question: "What happens if cryptographic keys are stolen or compromised?",
        options: [
            "Nothing, since keys are just one part of security",
            "The encrypted data becomes temporarily inaccessible",
            "The security of the encrypted data is compromised",
            "The data automatically self-destructs"
        ],
        correctAnswer: 2
    },
    
    // Module 2: Classical Ciphers
    {
        module: "Classical Ciphers",
        question: "In the Caesar cipher, what happens when shifting the letter Z by 1?",
        options: [
            "It becomes Y",
            "It becomes A",
            "It remains Z",
            "It becomes a number"
        ],
        correctAnswer: 1
    },
    {
        module: "Classical Ciphers",
        question: "What makes the Vigenère cipher stronger than the Caesar cipher?",
        options: [
            "It uses multiple shift values based on a keyword",
            "It uses larger numbers",
            "It was invented later in history",
            "It can only be used by governments"
        ],
        correctAnswer: 0
    },
    {
        module: "Classical Ciphers",
        question: "Which technique was historically used to break substitution ciphers?",
        options: [
            "Brute force attacks",
            "Frequency analysis",
            "Dictionary attacks",
            "Differential cryptanalysis"
        ],
        correctAnswer: 1
    },
    {
        module: "Classical Ciphers",
        question: "Who is credited with using the Caesar cipher in military communications?",
        options: [
            "Alexander the Great",
            "Julius Caesar",
            "Genghis Khan",
            "Napoleon Bonaparte"
        ],
        correctAnswer: 1
    },
    {
        module: "Classical Ciphers",
        question: "What is the main vulnerability of simple substitution ciphers?",
        options: [
            "They are too complex to implement correctly",
            "They preserve the frequency patterns of the original language",
            "They require too much computational power",
            "They can only encrypt short messages"
        ],
        correctAnswer: 1
    },
    {
        module: "Classical Ciphers",
        question: "The Enigma machine used in World War II is an example of what type of cipher?",
        options: [
            "A simple substitution cipher",
            "A polyalphabetic cipher with mechanical implementation",
            "A one-time pad",
            "A block cipher"
        ],
        correctAnswer: 1
    },
    
    // Module 3: Modern Cryptography
    {
        module: "Modern Cryptography",
        question: "Which encryption type uses different keys for encryption and decryption?",
        options: [
            "Symmetric encryption",
            "Asymmetric encryption",
            "Hash functions",
            "Substitution ciphers"
        ],
        correctAnswer: 1
    },
    {
        module: "Modern Cryptography",
        question: "What is a hash function primarily used for?",
        options: [
            "Encrypting data for secure transmission",
            "Verifying data integrity and creating fixed-size representations",
            "Securing email communications",
            "Generating random numbers"
        ],
        correctAnswer: 1
    },
    {
        module: "Modern Cryptography",
        question: "Which of these is an example of a symmetric encryption algorithm?",
        options: [
            "RSA",
            "AES",
            "ECC",
            "Diffie-Hellman"
        ],
        correctAnswer: 1
    },
    {
        module: "Modern Cryptography",
        question: "What is the main advantage of asymmetric encryption over symmetric encryption?",
        options: [
            "It's faster",
            "It uses smaller keys",
            "It solves the key distribution problem",
            "It provides stronger encryption"
        ],
        correctAnswer: 2
    },
    {
        module: "Modern Cryptography",
        question: "What security property does a good hash function NOT have?",
        options: [
            "Deterministic output",
            "Collision resistance",
            "Reversibility",
            "Avalanche effect"
        ],
        correctAnswer: 2
    },
    {
        module: "Modern Cryptography",
        question: "What does AES stand for?",
        options: [
            "Advanced Encryption System",
            "Advanced Encryption Standard",
            "Automated Encryption Service",
            "Algorithmic Encryption System"
        ],
        correctAnswer: 1
    },
    
    // Module 4: Applications
    {
        module: "Applications",
        question: "Which of these is a practical application of asymmetric encryption?",
        options: [
            "Full disk encryption",
            "Password storage",
            "Digital signatures",
            "Streaming video encryption"
        ],
        correctAnswer: 2
    },
    {
        module: "Applications",
        question: "What technology underlies cryptocurrencies like Bitcoin?",
        options: [
            "Virtual private networks",
            "Blockchain",
            "Quantum encryption",
            "Steganography"
        ],
        correctAnswer: 1
    },
    {
        module: "Applications",
        question: "What does HTTPS use to secure web communications?",
        options: [
            "A VPN tunnel",
            "A combination of TLS/SSL protocols with asymmetric and symmetric encryption",
            "Only symmetric encryption",
            "Steganography to hide data in images"
        ],
        correctAnswer: 1
    },
    {
        module: "Applications",
        question: "In the context of secure communications, what does 'end-to-end encryption' mean?",
        options: [
            "The encryption algorithm runs from start to finish",
            "Only the sender and recipient can read the messages",
            "The message is encrypted twice for extra security",
            "The entire network path is encrypted"
        ],
        correctAnswer: 1
    },
    {
        module: "Applications",
        question: "What is the main purpose of a digital signature?",
        options: [
            "To encrypt a document",
            "To compress a document for faster transmission",
            "To verify the identity of the sender and ensure document integrity",
            "To timestamp when a document was created"
        ],
        correctAnswer: 2
    },
    {
        module: "Applications",
        question: "How does blockchain technology ensure data integrity?",
        options: [
            "By using supercomputers to verify data",
            "By requiring government approval for all transactions",
            "By chaining blocks with cryptographic hashes and distributed validation",
            "By limiting access to authorized users only"
        ],
        correctAnswer: 2
    },
    
    // Module 5: Advanced Topics
    {
        module: "Advanced Topics",
        question: "What is quantum cryptography based on?",
        options: [
            "Faster computers",
            "The laws of quantum mechanics",
            "Historical ciphers",
            "Advanced mathematics only"
        ],
        correctAnswer: 1
    },
    {
        module: "Advanced Topics",
        question: "What is the unique capability of homomorphic encryption?",
        options: [
            "Performing computations on encrypted data without decrypting it",
            "Creating unbreakable encryption",
            "Reducing the size of encrypted files",
            "Faster encryption and decryption"
        ],
        correctAnswer: 0
    },
    {
        module: "Advanced Topics",
        question: "Which algorithm poses a significant threat to RSA encryption if implemented on a quantum computer?",
        options: [
            "Shor's algorithm",
            "Grover's algorithm",
            "Deutsch-Jozsa algorithm",
            "Quantum Fourier Transform"
        ],
        correctAnswer: 0
    },
    {
        module: "Advanced Topics",
        question: "What is a zero-knowledge proof used for?",
        options: [
            "Encrypting data with zero knowledge of the recipient",
            "Proving you know something without revealing what you know",
            "Creating encryption with zero processing overhead",
            "Decrypting data without a key"
        ],
        correctAnswer: 1
    },
    {
        module: "Advanced Topics",
        question: "Which of these is considered 'post-quantum cryptography'?",
        options: [
            "RSA with larger key sizes",
            "Elliptic curve cryptography",
            "Lattice-based cryptography",
            "Triple DES"
        ],
        correctAnswer: 2
    },
    {
        module: "Advanced Topics",
        question: "What is the main principle behind Quantum Key Distribution (QKD)?",
        options: [
            "Using quantum superposition to create unbreakable keys",
            "Using the observer effect to detect eavesdropping",
            "Using quantum entanglement to transmit data faster than light",
            "Using quantum tunneling to bypass encryption"
        ],
        correctAnswer: 1
    }
];

// Initialize quiz state
let currentQuestion = 0;
let userAnswers = Array(quizData.length).fill(null);
let quizStarted = false;

// Element references
const startButton = document.getElementById('start-final-quiz-btn');
const submitButton = document.getElementById('submit-quiz');
const introSection = document.getElementById('final-quiz-intro');
const questionsSection = document.getElementById('final-quiz-questions');
const resultsSection = document.getElementById('final-quiz-results');
const reviewSection = document.getElementById('question-review');
const prevButton = document.getElementById('prev-question');
const nextButton = document.getElementById('next-question');
const questionText = document.getElementById('question-text');
const answerOptions = document.getElementById('answer-options');
const currentQuestionEl = document.getElementById('current-question');
const totalQuestionsEl = document.getElementById('total-questions');
const finalScoreEl = document.getElementById('final-score');
const maxScoreEl = document.getElementById('max-score');
const scorePercentageEl = document.getElementById('score-percentage');
const passMessageEl = document.getElementById('pass-message');
const failMessageEl = document.getElementById('fail-message');
const reviewQuestionsButton = document.getElementById('review-questions');
const retakeQuizButton = document.getElementById('retake-quiz');
const backToResultsButton = document.getElementById('back-to-results');
const reviewContentEl = document.getElementById('review-content');
const generateCertButton = document.getElementById('generate-certificate');
const certificateNameInput = document.getElementById('certificate-name');
const certificateDownloadLink = document.getElementById('certificate-download');
const certificateLinkContainer = document.querySelector('.certificate-link');

// Set up event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Set total questions
    totalQuestionsEl.textContent = quizData.length;
    maxScoreEl.textContent = quizData.length;
    
    // Start quiz button
    startButton.addEventListener('click', startQuiz);
    
    // Quiz navigation
    prevButton.addEventListener('click', goToPreviousQuestion);
    nextButton.addEventListener('click', goToNextQuestion);
    
    // Submit quiz
    submitButton.addEventListener('click', submitQuiz);
    
    // Results screen buttons
    reviewQuestionsButton.addEventListener('click', showQuestionReview);
    retakeQuizButton.addEventListener('click', retakeQuiz);
    backToResultsButton.addEventListener('click', backToResults);
    
    // Certificate generation
    if (generateCertButton) {
        generateCertButton.addEventListener('click', generateCertificate);
    }
});

// Certificate generation function with improved error handling and visual feedback
function generateCertificate() {
    // Show loading state
    const buttonText = document.querySelector('#generate-certificate .button-text');
    const originalText = buttonText.textContent;
    buttonText.textContent = "Generating...";
    
    // Disable button during generation
    const generateBtn = document.getElementById('generate-certificate');
    generateBtn.disabled = true;
    generateBtn.classList.add('generating');
    
    // Get user input
    const userName = certificateNameInput.value.trim();
    if (!userName) {
        alert('Please enter your name to generate the certificate.');
        buttonText.textContent = originalText;
        generateBtn.disabled = false;
        generateBtn.classList.remove('generating');
        return;
    }
    
    // Check if libraries are available
    if (typeof window.jspdf === 'undefined' && typeof jspdf === 'undefined') {
        console.error('jsPDF library not available');
        alert('PDF generation library is not available. Please check your internet connection and try again.');
        buttonText.textContent = originalText;
        generateBtn.disabled = false;
        generateBtn.classList.remove('generating');
        return;
    }
    
    // Get certificate details
    const certLevel = document.getElementById('cert-level').textContent;
    const score = finalScoreEl.textContent;
    const percentage = scorePercentageEl.textContent;
    const currentDate = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    
    // Generate certificate ID
    const certID = 'CL-' + Math.random().toString(36).substring(2, 10).toUpperCase();
    
    // Wrap in setTimeout to allow the UI to update before heavy processing
    setTimeout(() => {
        try {
            // Access jsPDF correctly - try multiple ways to access it
            let jsPDFlib;
            if (window.jspdf) {
                jsPDFlib = window.jspdf;
            } else if (typeof jspdf !== 'undefined') {
                jsPDFlib = jspdf;
            } else {
                throw new Error('jsPDF library not available');
            }
            
            const { jsPDF } = jsPDFlib;
            
            // Create PDF using jsPDF
            const doc = new jsPDF({
                orientation: 'landscape',
                unit: 'mm',
                format: 'a4'
            });
            
            // Certificate design
            // Fancy gradient background
            for (let i = 0; i < 210; i += 2) {
                const shade = 230 + Math.floor((i / 210) * 25);
                doc.setFillColor(shade, shade, shade);
                doc.rect(0, i, 297, 2, 'F');
            }
            
            // Decorative border
            // Outer border
            doc.setDrawColor(0, 120, 50);
            doc.setLineWidth(3);
            doc.rect(10, 10, 277, 190);
            
            // Inner border
            doc.setDrawColor(0, 160, 65);
            doc.setLineWidth(1);
            doc.rect(15, 15, 267, 180);
            
            // Corner decorations
            function drawCornerDecoration(x, y, rotation) {
                doc.saveGraphicsState();
                doc.translate(x, y);
                doc.rotate(rotation);
                
                // Draw decorative corner element
                doc.setDrawColor(0, 180, 70);
                doc.setLineWidth(1);
                
                // Curved lines
                for (let i = 0; i < 20; i += 4) {
                    doc.setDrawColor(0, 180 - i * 3, 70);
                    doc.moveTo(0, i);
                    doc.curveTo(10, i, 20, i, 30, 0);
                    doc.stroke();
                }
                
                doc.restoreGraphicsState();
            }
            
            // Draw corner decorations
            drawCornerDecoration(15, 15, 0);
            drawCornerDecoration(282, 15, 90);
            drawCornerDecoration(282, 195, 180);
            drawCornerDecoration(15, 195, 270);
            
            // Header ribbon
            doc.setFillColor(0, 140, 60);
            doc.roundedRect(50, 30, 197, 20, 5, 5, 'F');
            
            // Cryptographic pattern - binary/hex pattern along top and bottom
            doc.setFontSize(6);
            doc.setTextColor(180, 180, 180);
            let binaryPattern = '';
            for (let i = 0; i < 90; i++) {
                binaryPattern += Math.round(Math.random()) ? '1' : '0';
            }
            doc.text(binaryPattern, 148.5, 25, { align: 'center' });
            
            let hexPattern = '';
            for (let i = 0; i < 40; i++) {
                hexPattern += '0123456789ABCDEF'[Math.floor(Math.random() * 16)];
            }
            doc.text(hexPattern, 148.5, 200, { align: 'center' });
            
            // Header text
            doc.setFontSize(26);
            doc.setTextColor(255, 255, 255);
            doc.setFont('helvetica', 'bold');
            doc.text('CERTIFICATE OF ACHIEVEMENT', 148.5, 45, { align: 'center' });
            
            // Subtitle
            doc.setFontSize(12);
            doc.setTextColor(0, 60, 30);
            doc.setFont('helvetica', 'italic');
            doc.text('CIPHERLAB CRYPTOGRAPHY MASTERY PROGRAM', 148.5, 60, { align: 'center' });
            
            // Seal/Emblem
            const centerX = 148.5;
            const centerY = 80;
            const radius = 20;
            
            // Outer circle
            doc.setDrawColor(0, 120, 50);
            doc.setLineWidth(1.5);
            doc.circle(centerX, centerY, radius);
            
            // Inner circle
            doc.setFillColor(0, 160, 65);
            doc.circle(centerX, centerY, radius - 2, 'F');
            
            // Center circle
            doc.setFillColor(255, 255, 255);
            doc.circle(centerX, centerY, radius - 6, 'F');
            
            // Draw lock icon in center
            doc.setDrawColor(0, 120, 50);
            doc.setFillColor(0, 120, 50);
            
            // Lock body
            doc.roundedRect(centerX - 4, centerY - 2, 8, 10, 2, 2, 'F');
            
            // Lock shackle
            doc.setLineWidth(1.5);
            doc.arc(centerX, centerY - 5, 5, 0, Math.PI, 'S');
            
            // Binary circle around seal
            doc.setFontSize(4);
            for (let i = 0; i < 360; i += 15) {
                const x = centerX + (radius + 3) * Math.cos(i * Math.PI / 180);
                const y = centerY + (radius + 3) * Math.sin(i * Math.PI / 180);
                doc.text(Math.round(Math.random()) ? '1' : '0', x, y);
            }
            
            // Main text
            doc.setFontSize(14);
            doc.setTextColor(0, 0, 0);
            doc.setFont('helvetica', 'normal');
            doc.text('This is to certify that', 148.5, 115, { align: 'center' });
            
            // Name
            doc.setFontSize(28);
            doc.setFont('helvetica', 'bold');
            doc.setTextColor(0, 100, 40);
            doc.text(userName, 148.5, 130, { align: 'center' });
            
            // Decorative line under name
            doc.setDrawColor(0, 160, 65);
            doc.setLineWidth(1);
            const nameWidth = doc.getTextWidth(userName);
            doc.line(148.5 - nameWidth/2 - 10, 133, 148.5 + nameWidth/2 + 10, 133);
            
            // Certificate text
            doc.setFontSize(14);
            doc.setTextColor(0, 0, 0);
            doc.setFont('helvetica', 'normal');
            doc.text('has successfully completed the CipherLab Cryptography Course', 148.5, 145, { align: 'center' });
            
            // Achievement level
            doc.setFont('helvetica', 'bolditalic');
            doc.setTextColor(0, 100, 40);
            doc.text(`and earned the title of ${certLevel}`, 148.5, 155, { align: 'center' });
            
            doc.setFont('helvetica', 'normal');
            doc.setTextColor(0, 0, 0);
            doc.text(`with a score of ${score} (${percentage})`, 148.5, 165, { align: 'center' });
            
            // Date and certificate ID
            doc.setFontSize(10);
            doc.text(`Issued on ${currentDate}`, 60, 180);
            doc.text(`Certificate ID: ${certID}`, 230, 180);
            
            // Signature line
            doc.setDrawColor(0, 100, 40);
            doc.setLineWidth(0.8);
            doc.line(60, 185, 120, 185);
            
            // Signature
            doc.setFontSize(12);
            doc.setFont('helvetica', 'italic');
            doc.text('Dr. Cipher Master', 90, 183);
            doc.setFontSize(9);
            doc.setFont('helvetica', 'normal');
            doc.text('CipherLab Director', 90, 190);
            
            // Create blob and download link
            const pdfBlob = doc.output('blob');
            const pdfUrl = URL.createObjectURL(pdfBlob);
            
            certificateDownloadLink.href = pdfUrl;
            certificateDownloadLink.download = `${userName.replace(/\s+/g, '_')}_CipherLab_Certificate.pdf`;
            
            // Show success UI
            certificateLinkContainer.style.display = 'block';
            certificateLinkContainer.scrollIntoView({ behavior: 'smooth' });
            
            // Reset button state
            buttonText.textContent = originalText;
            generateBtn.disabled = false;
            generateBtn.classList.remove('generating');
            
            // Add success animation to button
            generateBtn.classList.add('success');
            setTimeout(() => {
                generateBtn.classList.remove('success');
            }, 3000);
            
        } catch (error) {
            console.error('Error generating certificate:', error);
            
            // Create a more helpful error message
            let errorMessage = 'There was an error generating your certificate. ';
            
            if (error.message && error.message.includes('jsPDF')) {
                errorMessage += 'The PDF generation library could not be loaded. Please check your internet connection and try again.';
            } else {
                errorMessage += 'Please try again. If the problem persists, try refreshing the page.';
            }
            
            alert(errorMessage);
            
            // Reset button state
            buttonText.textContent = originalText;
            generateBtn.disabled = false;
            generateBtn.classList.remove('generating');
        }
    }, 100);
}

// Function to start the quiz
function startQuiz() {
    quizStarted = true;
    introSection.style.display = 'none';
    questionsSection.style.display = 'block';
    startButton.style.display = 'none';
    submitButton.style.display = 'block';
    
    // Reset quiz state
    currentQuestion = 0;
    userAnswers = Array(quizData.length).fill(null);
    
    // Load the first question
    loadQuestion(currentQuestion);
    updateNavButtons();
}

// Function to load a question
function loadQuestion(index) {
    const question = quizData[index];
    questionText.textContent = question.question;
    currentQuestionEl.textContent = index + 1;
    
    // Clear previous options
    answerOptions.innerHTML = '';
    
    // Add options
    question.options.forEach((option, optionIndex) => {
        const optionElement = document.createElement('div');
        optionElement.className = 'option';
        if (userAnswers[index] === optionIndex) {
            optionElement.classList.add('selected');
        }
        
        optionElement.innerHTML = `
            <input type="radio" id="option-${optionIndex}" name="question-${index}" value="${optionIndex}" ${userAnswers[index] === optionIndex ? 'checked' : ''}>
            <label for="option-${optionIndex}">${option}</label>
        `;
        
        optionElement.addEventListener('click', () => {
            selectAnswer(index, optionIndex);
        });
        
        answerOptions.appendChild(optionElement);
    });
}

// Function to select an answer
function selectAnswer(questionIndex, optionIndex) {
    userAnswers[questionIndex] = optionIndex;
    
    // Update UI to reflect selection
    const options = answerOptions.querySelectorAll('.option');
    options.forEach((option, idx) => {
        if (idx === optionIndex) {
            option.classList.add('selected');
            option.querySelector('input').checked = true;
        } else {
            option.classList.remove('selected');
            option.querySelector('input').checked = false;
        }
    });
}

// Navigation functions
function goToPreviousQuestion() {
    if (currentQuestion > 0) {
        currentQuestion--;
        loadQuestion(currentQuestion);
        updateNavButtons();
    }
}

function goToNextQuestion() {
    if (currentQuestion < quizData.length - 1) {
        currentQuestion++;
        loadQuestion(currentQuestion);
        updateNavButtons();
    }
}

function updateNavButtons() {
    prevButton.disabled = currentQuestion === 0;
    nextButton.disabled = currentQuestion === quizData.length - 1;
}

// Submit quiz and show results
function submitQuiz() {
    // Calculate score
    const score = calculateScore();
    const percentage = Math.round((score / quizData.length) * 100);
    
    // Update results display
    finalScoreEl.textContent = score;
    scorePercentageEl.textContent = `${percentage}%`;
    
    // Show appropriate message and set certificate level
    if (percentage >= 70) {
        passMessageEl.style.display = 'block';
        failMessageEl.style.display = 'none';
        
        // Set certificate level based on score
        const certLevel = document.getElementById('cert-level');
        if (percentage >= 90) {
            certLevel.textContent = "Master Cryptographer";
        } else if (percentage >= 80) {
            certLevel.textContent = "Cryptography Expert";
        } else {
            certLevel.textContent = "Cryptography Specialist";
        }
    } else {
        passMessageEl.style.display = 'none';
        failMessageEl.style.display = 'block';
    }
    
    // Switch to results view
    questionsSection.style.display = 'none';
    resultsSection.style.display = 'block';
    submitButton.style.display = 'none';
}

// Calculate quiz score
function calculateScore() {
    let score = 0;
    userAnswers.forEach((answer, index) => {
        if (answer === quizData[index].correctAnswer) {
            score++;
        }
    });
    return score;
}

// Show review of questions and answers
function showQuestionReview() {
    resultsSection.style.display = 'none';
    reviewSection.style.display = 'block';
    
    // Clear previous content
    reviewContentEl.innerHTML = '';
    
    // Generate review content
    quizData.forEach((question, index) => {
        const reviewItem = document.createElement('div');
        reviewItem.className = 'review-item';
        
        const isCorrect = userAnswers[index] === question.correctAnswer;
        
        reviewItem.innerHTML = `
            <div class="review-question">
                <span class="question-number">${index + 1}.</span>
                <span class="question-text">${question.question}</span>
                <span class="question-result ${isCorrect ? 'correct' : 'incorrect'}">
                    <i class="fas ${isCorrect ? 'fa-check-circle' : 'fa-times-circle'}"></i>
                </span>
            </div>
            <div class="review-answers">
                ${question.options.map((option, optIndex) => `
                    <div class="review-option ${optIndex === question.correctAnswer ? 'correct-answer' : ''} ${optIndex === userAnswers[index] && optIndex !== question.correctAnswer ? 'wrong-answer' : ''}">
                        ${option}
                        ${optIndex === question.correctAnswer ? '<i class="fas fa-check"></i>' : ''}
                        ${optIndex === userAnswers[index] && optIndex !== question.correctAnswer ? '<i class="fas fa-times"></i>' : ''}
                    </div>
                `).join('')}
            </div>
        `;
        
        reviewContentEl.appendChild(reviewItem);
    });
}

// Return to results from review
function backToResults() {
    reviewSection.style.display = 'none';
    resultsSection.style.display = 'block';
}

// Retake the quiz
function retakeQuiz() {
    resultsSection.style.display = 'none';
    startQuiz();
}
</script>

<style>
/* Final Quiz Styling */
.final-quiz-container {
    margin: 2rem 0;
}

.final-quiz-card {
    background-color: var(--medium-dark);
    border-radius: 10px;
    border: 1px solid var(--primary-dark);
    overflow: hidden;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
}

.final-quiz-header {
    display: flex;
    align-items: center;
    padding: 1.5rem;
    background-color: var(--darker);
    border-bottom: 1px solid var(--primary-dark);
}

.quiz-icon {
    font-size: 2rem;
    color: var(--primary);
    margin-right: 1.5rem;
}

.quiz-info h3 {
    color: var(--primary);
    margin: 0;
    font-size: 1.5rem;
}

.quiz-info p {
    margin: 0.25rem 0 0 0;
    color: var(--text-muted);
}

.quiz-status {
    margin-left: auto;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.quiz-status i {
    font-size: 1.25rem;
}

.final-quiz-content {
    padding: 2rem;
}

.final-quiz-footer {
    padding: 1.5rem;
    border-top: 1px solid var(--primary-dark);
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.requirements {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.requirements p {
    margin: 0;
    color: var(--text-muted);
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.quiz-progress {
    width: 200px;
    height: 8px;
    background-color: var(--darker);
    border-radius: 4px;
    overflow: hidden;
}

.quiz-progress-value {
    height: 100%;
    background-color: var(--primary);
    transition: width 0.3s ease;
}

.final-quiz-button {
    display: inline-block;
    background: linear-gradient(45deg, var(--primary-dark), var(--primary));
    color: var(--dark);
    font-weight: 700;
    padding: 0.75rem 1.5rem;
    font-size: 1.1rem;
    text-decoration: none;
    border-radius: 4px;
    border: none;
    position: relative;
    z-index: 1;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.final-quiz-button:hover {
    color: var(--dark);
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
}

/* Question Styling */
.question-container {
    max-width: 800px;
    margin: 0 auto;
}

.question-container h4 {
    font-size: 1.3rem;
    color: var(--primary);
    margin-bottom: 1.5rem;
}

.answer-options {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
}

.option {
    background-color: var(--darker);
    padding: 1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 1px solid var(--darker);
    display: flex;
    align-items: center;
}

.option:hover {
    background-color: var(--light-dark);
    transform: translateY(-2px);
}

.option.selected {
    background-color: var(--primary-dark);
    border-color: var(--primary);
}

.option input[type="radio"] {
    margin-right: 1rem;
}

.option label {
    font-size: 1.1rem;
    cursor: pointer;
    flex: 1;
}

.quiz-navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--primary-dark);
}

.nav-button {
    background-color: var(--darker);
    color: var(--text);
    border: 1px solid var(--primary-dark);
    padding: 0.75rem 1.25rem;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
}

.nav-button:hover:not(:disabled) {
    background-color: var(--primary-dark);
    color: var(--dark);
}

.nav-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.question-progress {
    font-size: 1.1rem;
    color: var(--text-muted);
}

/* Results Styling */
.results-header {
    text-align: center;
    margin-bottom: 2rem;
}

.results-header h3 {
    color: var(--primary);
    font-size: 1.75rem;
    margin: 0;
}

.score-display {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 2rem;
}

.score-circle {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    border: 6px solid var(--primary);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--primary);
    margin-bottom: 1rem;
}

.score-percentage {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text);
}

.results-message {
    text-align: center;
    margin-bottom: 2rem;
    padding: 1.5rem;
    border-radius: 8px;
}

.results-message i {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

.results-message h4 {
    font-size: 1.5rem;
    margin: 0 0 1rem 0;
}

.results-message p {
    font-size: 1.1rem;
    margin: 0 0 1.5rem 0;
}

#pass-message {
    background-color: rgba(0, 255, 65, 0.1);
    border: 1px solid var(--primary);
}

#pass-message i {
    color: var(--primary);
}

#fail-message {
    background-color: rgba(255, 0, 0, 0.1);
    border: 1px solid #ff4d4d;
}

#fail-message i {
    color: #ff4d4d;
}

.certificate-level {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: rgba(0, 255, 65, 0.2);
    border-radius: 4px;
    display: inline-block;
}

.certificate-level span {
    font-weight: 700;
    font-size: 1.25rem;
    color: var(--primary);
}

.certificate-form {
    margin-top: 2rem;
    background-color: var(--darker);
    padding: 1.5rem;
    border-radius: 8px;
    border: 1px solid var(--primary-dark);
}

.certificate-form p {
    margin-bottom: 1rem;
}

.name-input-container {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    margin-bottom: 1rem;
}

.name-input {
    flex: 1;
    min-width: 250px;
    padding: 0.75rem 1rem;
    border-radius: 6px;
    border: 1px solid var(--primary-dark);
    background-color: var(--medium-dark);
    color: var(--text);
    font-size: 1rem;
    transition: all 0.3s ease;
}

.name-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(0, 255, 65, 0.2);
    transform: translateY(-2px);
}

/* Fancy Generate Certificate Button */
#generate-certificate {
    background: linear-gradient(45deg, var(--primary-dark), var(--primary));
    color: var(--dark);
    font-weight: 700;
    padding: 0.9rem 1.75rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.1rem;
    border: none;
    box-shadow: 0 4px 15px rgba(0, 200, 83, 0.4);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    position: relative;
    overflow: hidden;
    z-index: 1;
}

#generate-certificate:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, var(--primary), var(--primary-dark));
    opacity: 0;
    z-index: -1;
    transition: opacity 0.3s ease;
}

#generate-certificate:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 20px rgba(0, 200, 83, 0.6);
}

#generate-certificate:hover:before {
    opacity: 1;
}

#generate-certificate:active {
    transform: translateY(0);
    box-shadow: 0 2px 10px rgba(0, 200, 83, 0.4);
}

#generate-certificate:after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 60%);
    opacity: 0;
    transform: scale(0.5);
    transition: opacity 0.3s ease, transform 0.5s ease;
}

#generate-certificate:hover:after {
    opacity: 1;
    transform: scale(1);
}

.fancy-generate-button {
    background: linear-gradient(135deg, var(--primary-dark), var(--primary), var(--primary-dark));
    background-size: 200% auto;
    color: var(--dark);
    border: none;
    padding: 0.9rem 2rem;
    border-radius: 12px;
    cursor: pointer;
    font-weight: 700;
    font-size: 1.2rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 255, 65, 0.3), inset 0 0 10px rgba(255, 255, 255, 0.2);
    position: relative;
    overflow: hidden;
    min-width: 240px;
    animation: pulse 2.5s infinite;
}

.fancy-generate-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    transition: all 0.6s ease;
}

.fancy-generate-button:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 255, 65, 0.5), inset 0 0 15px rgba(255, 255, 255, 0.4);
    background-position: right center;
}

.fancy-generate-button:hover::before {
    left: 100%;
}

.fancy-generate-button:active {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 255, 65, 0.4);
}

@keyframes pulse {
    0% {
        box-shadow: 0 4px 15px rgba(0, 255, 65, 0.3), inset 0 0 10px rgba(255, 255, 255, 0.2);
    }
    50% {
        box-shadow: 0 4px 25px rgba(0, 255, 65, 0.5), inset 0 0 15px rgba(255, 255, 255, 0.3);
    }
    100% {
        box-shadow: 0 4px 15px rgba(0, 255, 65, 0.3), inset 0 0 10px rgba(255, 255, 255, 0.2);
    }
}

.button-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(0, 0, 0, 0.15);
    width: 35px;
    height: 35px;
    border-radius: 50%;
    box-shadow: inset 0 0 5px rgba(0, 255, 65, 0.3);
    transition: all 0.3s ease;
}

.fancy-generate-button:hover .button-icon {
    background-color: rgba(0, 0, 0, 0.25);
    transform: rotate(360deg);
    box-shadow: inset 0 0 8px rgba(0, 255, 65, 0.6);
}

.button-text {
    flex: 1;
    text-align: center;
}

.certificate-link {
    margin-top: 1.5rem;
}

.certificate-link a {
    display: inline-block;
    background-color: var(--primary);
    color: var(--dark);
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
}

.certificate-link a:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.certificate-preview {
    display: none;
    margin: 2rem 0;
    border: 1px solid var(--primary-dark);
    border-radius: 8px;
    overflow: hidden;
    background-color: white;
}

/* Added visual feedback styles for certificate generation */
#generate-certificate.generating {
    opacity: 0.8;
    cursor: wait;
    animation: pulse 1s infinite alternate;
}

#generate-certificate.generating .button-icon {
    animation: spin 1.5s linear infinite;
}

#generate-certificate.success {
    background: linear-gradient(135deg, #28a745, #20c997);
    box-shadow: 0 4px 15px rgba(40, 167, 69, 0.5);
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

/* Enhanced certificate link styling */
.certificate-link {
    margin-top: 1.5rem;
    text-align: center;
    background-color: rgba(0, 255, 65, 0.1);
    border-radius: 8px;
    padding: 1.2rem;
    border: 1px dashed var(--primary);
    animation: fadeIn 0.5s ease-in-out;
}

.certificate-link a {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--primary);
    color: var(--dark);
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
}

.certificate-link a:before {
    content: "\f56e"; /* Font Awesome download icon */
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.action-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
}

.review-button, .retake-button {
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    border: none;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
}

.review-button {
    background-color: var(--darker);
    color: var(--text);
    border: 1px solid var(--primary-dark);
}

.review-button:hover {
    background-color: var(--light-dark);
}

.retake-button {
    background-color: var(--primary-dark);
    color: var(--dark);
}

.retake-button:hover {
    background-color: var(--primary);
    transform: translateY(-3px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

/* Question Review Styling */
.review-header {
    text-align: center;
    margin-bottom: 2rem;
}

.review-header h3 {
    color: var(--primary);
    font-size: 1.75rem;
    margin: 0;
}

.review-item {
    background-color: var(--darker);
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
}

.review-question {
    margin-bottom: 1rem;
    display: flex;
    align-items: flex-start;
}

.question-number {
    font-weight: 700;
    margin-right: 0.5rem;
    min-width: 24px;
}

.question-text {
    flex: 1;
    font-size: 1.1rem;
}

.question-result {
    margin-left: 1rem;
}

.question-result.correct {
    color: var(--primary);
}

.question-result.incorrect {
    color: #ff4d4d;
}

.review-answers {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-left: 24px;
}

.review-option {
    background-color: var(--medium-dark);
    padding: 0.75rem;
    border-radius: 6px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.review-option.correct-answer {
    background-color: rgba(0, 255, 65, 0.1);
    border: 1px solid var(--primary);
}

.review-option.wrong-answer {
    background-color: rgba(255, 0, 0, 0.1);
    border: 1px solid #ff4d4d;
}

.review-option i {
    font-size: 1rem;
}

.review-option.correct-answer i {
    color: var(--primary);
}

.review-option.wrong-answer i {
    color: #ff4d4d;
}

.back-button {
    background-color: var(--darker);
    color: var(--text);
    border: 1px solid var(--primary-dark);
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    transition: all 0.3s ease;
    font-weight: 500;
    margin-top: 2rem;
}

.back-button:hover {
    background-color: var(--primary-dark);
    color: var(--dark);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .final-quiz-header, .final-quiz-footer {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
    
    .quiz-status, .quiz-icon {
        margin: 0;
    }
    
    .quiz-progress {
        width: 100%;
    }
    
    .action-buttons {
        flex-direction: column;
        width: 100%;
    }
    
    .review-button, .retake-button {
        width: 100%;
        justify-content: center;
    }
}
</style>
